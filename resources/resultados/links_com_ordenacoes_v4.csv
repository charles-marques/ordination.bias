301-- Metodos.java--         Collections.sort(lista1); //Ordena os objetos por nome// 
301-- PessoasContato.java--     public int compareTo(PessoasContato o) {
301-- PessoasContato.java--         return this.nome.compareTo(o.getNome());
405-- DateUtils.java-- 		Collections.sort(retorno);
88-- PessoaRepository.java-- 	List<Pessoa> findAllByOrderByNomeDesc();
88-- PessoaServiceImpl.java--         return pessoaRepository.findAllByOrderByNomeDesc();
88-- PessoaRepositoryTest.java--         List<Pessoa> pessoas = pessoaRepository.findAllByOrderByNomeDesc();
18-- Main.java--                 Collections.sort(pessoas, (o1, o2) -> {
18-- Main.java--                     return o1.getNome().compareTo(o2.getNome());
18-- Main.java--                 Collections.sort(pessoas, (o1, o2) -> {
18-- Main.java--                 Collections.sort(pessoas, (o1, o2) -> {
18-- Main.java--                 Collections.sort(pessoas, (o1, o2) -> {
366-- DataAnalyzer.java-- 		Entry<String, Double> worstSalesmanProfit = set.stream().sorted(new Comparator<Entry<String, Double>>() {
366-- DataAnalyzer.java-- 			public int compare(Entry<String, Double> o1, Entry<String, Double> o2) {
366-- DataAnalyzer.java-- 				.sorted(Comparator.comparingDouble(Sale::getTotal))
105-- EnderecoBean.java-- 			estados.entrySet().stream().sorted(Map.Entry.<String, String>comparingByKey()).forEachOrdered(x -> listaEstadosOrdenada.put(x.getKey(), x.getKey()));
609-- HashShardMapping.java--         public int compare(ShardIndex i1, ShardIndex i2) {
609-- HashShardMapping.java--             return i2.getBound().compareTo(i1.getBound());
609-- HashShardMapping.java--             if (i.getBound().compareTo(hashedKey) <= 0) {
609-- RangeShardMapping.java--         public int compare(ShardIndex i1, ShardIndex i2) {
609-- RangeShardMapping.java--             return bound2.compareTo(bound1); // this reverses it
609-- Server.java--     public int compareTo(Server other) {
609-- Server.java--         return getUuid().compareTo(other.getUuid());
609-- DatabaseMetaData.java--         public int compareTo(IndexMetaDataKey indexInfoKey) {
609-- DatabaseMetaData.java--             if ((compareResult = this.columnNonUnique.compareTo(indexInfoKey.columnNonUnique)) != 0) {
609-- DatabaseMetaData.java--             if ((compareResult = this.columnType.compareTo(indexInfoKey.columnType)) != 0) {
609-- DatabaseMetaData.java--             if ((compareResult = this.columnIndexName.compareTo(indexInfoKey.columnIndexName)) != 0) {
609-- DatabaseMetaData.java--             return this.columnOrdinalPosition.compareTo(indexInfoKey.columnOrdinalPosition);
609-- DatabaseMetaData.java--         public int compareTo(TableMetaDataKey tablesKey) {
609-- DatabaseMetaData.java--             if ((compareResult = this.tableType.compareTo(tablesKey.tableType)) != 0) {
609-- DatabaseMetaData.java--             if ((compareResult = this.tableCat.compareTo(tablesKey.tableCat)) != 0) {
609-- DatabaseMetaData.java--             if ((compareResult = this.tableSchem.compareTo(tablesKey.tableSchem)) != 0) {
609-- DatabaseMetaData.java--             return this.tableName.compareTo(tablesKey.tableName);
609-- DatabaseMetaData.java--         public int compareTo(ComparableWrapper<K, V> other) {
609-- DatabaseMetaData.java--             return getKey().compareTo(other.getKey());
609-- DatabaseMetaData.java--             Collections.sort(resultsAsList);
609-- DatabaseMetaData.java--                                                 if (dummy.compareTo(foreignTableWithCase) != 0) {
609-- DatabaseMetaData.java--                                                 if (parsedInfo.referencedTable.compareTo(primaryTableWithCase) != 0) {
609-- DatabaseMetaData.java--     public int getMaxColumnsInOrderBy() throws SQLException {
609-- DatabaseMetaData.java--                     Collections.sort(procsOrFuncsToExtractList);
609-- DatabaseMetaData.java--                 // Required to be sorted in name-order by JDBC spec, in 'normal' case getProcedures takes care of this for us, but if system tables are
609-- DatabaseMetaData.java--                 // Collections.sort(proceduresToExtractList);
609-- DatabaseMetaData.java--             Collections.sort(procedureRowsToSort);
609-- DatabaseMetaData.java--     public boolean supportsExpressionsInOrderBy() throws SQLException {
609-- DatabaseMetaData.java--     public boolean supportsOrderByUnrelated() throws SQLException {
609-- ResultSetImpl.java--                 if (overflowCheck && this.jdbcCompliantTruncationForReads && ((asBigInt.compareTo(new BigInteger(String.valueOf(Long.MAX_VALUE))) > 0)
609-- ResultSetImpl.java--                         || (asBigInt.compareTo(new BigInteger(String.valueOf(Long.MIN_VALUE))) < 0))) {
609-- ResultSetImpl.java--                 if (overflowCheck && this.jdbcCompliantTruncationForReads && ((asBigInt.compareTo(new BigInteger(String.valueOf(Short.MAX_VALUE))) > 0)
609-- ResultSetImpl.java--                         || (asBigInt.compareTo(new BigInteger(String.valueOf(Short.MIN_VALUE))) < 0))) {
609-- TestDumpCommands.java--         public int compare(Server s1, Server s2) {
609-- TestDumpCommands.java--             l = s1.getHostname().compareTo(s2.getHostname());
609-- TestDumpCommands.java--             l = ((Integer) s1.getPort()).compareTo(s2.getPort());
609-- TestDumpCommands.java--         Collections.sort(servers, serverHostnamePortSorter);
609-- TestFabricMySQLConnectionSharding.java--             rs = this.conn.createStatement().executeQuery("select x from testGlobalTableCreation order by 1");
609-- TestHABasics.java--         ResultSet rs = s.executeQuery("select name from fruits order by 1");
609-- MetaDataRegressionTest.java--                     previousDb.compareTo(this.rs.getString(1)) < 0);
609-- ResultSetRegressionTest.java--      * Tests fix for BUG#2654, "Column 'column.table' not found" when "order by"
609-- ResultSetRegressionTest.java--             String statement = "select foo.id, foo.data, bar.data from foo, bar	where foo.id = bar.id order by foo.id";
609-- ResultSetRegressionTest.java--             this.rs = scrollableStmt.executeQuery("SELECT * FROM testBug22305979_orig_1 order by tmp");
609-- StatementRegressionTest.java--                 testRS.getBigDecimal(2).compareTo(new BigDecimal(Integer.MAX_VALUE)) == 1);
609-- StatementRegressionTest.java--                 testRS.getBigDecimal(1).compareTo(new BigDecimal(Integer.MAX_VALUE)) == 1);
609-- StatementRegressionTest.java--             if (e.getCause() instanceof IOException && "Packets received out of order".compareTo(e.getCause().getMessage()) == 0) {
609-- StressRegressionTest.java--             Collections.sort(elapsedTimes);
565-- Time.java--     public int compareTo(Object o) {
565-- Task.java--     public int compareTo(Object o) {
565-- Task.java--             return (((Task)o).getTime()).compareTo(this.getTime());
379-- LancamentoGateway.java--     return repository.findByStatusAndVencimentoBeforeAndDataExclusaoIsNullOrderByUsuarioNome(status, date);
379-- LancamentoRepository.java--   Collection<Lancamento> findByStatusAndVencimentoBeforeAndDataExclusaoIsNullOrderByUsuarioNome(
379-- LancamentoRepository.java--   Page<Lancamento> findByStatusAndUsuarioEmailAndUuidAndParcelaGreaterThanOrderByParcela(
510-- BancoDeInfo.java-- 			if(cadastrados.get(i).getRg().compareTo(x.getRg())==0) throw new ExceptionRG("RG já está cadastrado.");
510-- Janela.java-- 			if(show.compareTo("")==0) show = "Não há ninguem dentro do recinto.";
510-- Janela.java-- 			if(show.compareTo("")==0) show = "Não há ninguem fora do recinto.";
510-- Janela.java-- 		if(tipo.compareTo("Professor")==0){
510-- Janela.java-- 			if(tIdFuncionario.getText()==null || tIdFuncionario.getText().compareTo("")==0 || 
510-- Janela.java-- 			   tIdProfessor.getText()==null || tIdProfessor.getText().compareTo("")==0){
510-- Janela.java-- 		if(tipo.compareTo("Aluno")==0 || tipo.compareTo("Funcionario")==0){
510-- Janela.java-- 			if(tNome.getText()==null || tNome.getText().compareTo("")==0 || tRg.getText()==null || tRg.getText().compareTo("")==0 ||
510-- Janela.java-- 			   tIdade.getText()==null || tIdade.getText().compareTo("")==0 || tId.getText()==null || tId.getText().compareTo("")==0){
510-- Janela.java-- 			if(tipo.compareTo("Aluno")==0 && confirm){
510-- Janela.java-- 			if(tipo.compareTo("Funcionario")==0 && confirm){
659-- Analisador.java--         Collections.sort(bases);
659-- CalculadorProximaJogadaIA.java--         Collections.sort(listValoresNasPosicoesOcupadas);
659-- GeradorDeJogosDaVelha.java--         Collections.sort(bases);
659-- ProbabilidadesDeVencerCache.java--         Collections.sort(valoresNosIndiceUltimasPosicoesJogadas);
652-- BdHelper.java--                         null, // g. order by
652-- BdHelper.java--                         null, // g. order by
652-- BdHelper.java--                         null, // g. order by
275-- AgendaTelefonica.java--         preenchertabela("select * from telefones order by id");
275-- AgendaTelefonica.java--         preenchertabela("select * from telefones order by id");
275-- AgendaTelefonica.java--         //preenchertabela("select * from usuarios where Usuario ='" + jTextField1log.getText()+"' order by id ");
275-- AgendaTelefonica.java--             preenchertabela("select * from telefones order by id");
275-- AgendaTelefonica.java--         //    preenchertabela("select * from usuarios where Usuario ='" + jTextField1log.getText()+"' order by id ");
275-- AgendaTelefonica.java-- //        preenchertabela("select * from login order by nome");
275-- AgendaLigacoes.java--         preenchertabela("select * from telefones order by id");
275-- AgendaLigacoes.java--         preenchertabelaa("select * from solicitacoes order by id");
275-- AgendaLigacoes.java--         preenchertabelaa("select * from solicitacoes order by id");
275-- AgendaLigacoes.java--         //preenchertabela("select * from usuarios where Usuario ='" + jTextField1log.getText()+"' order by id ");
275-- AgendaLigacoes.java--             preenchertabelaa("select * from solicitacoes order by id");
275-- AgendaLigacoes.java--         //    preenchertabela("select * from usuarios where Usuario ='" + jTextField1log.getText()+"' order by id ");
275-- AgendaLigacoes.java--         //preenchertabela("select * from usuarios order by id");
275-- AgendaLigacoes.java--         preenchertabela("select * from telefones order by id");
275-- AgendaLigacoes.java--         preenchertabelaa("select * from telefones order by id");
275-- AgendaLigacoes.java--         //preenchertabela("select * from usuarios where Usuario ='" + jTextField1log.getText()+"' order by id ");
275-- CadastroLogin.java--         preenchertabela("select * from login where permissao in ('Gestor', 'Recebedor', 'recepÃ§Ã£o') order by nome"); 
275-- CadastroLogin.java--             preenchertabela("select * from login order by nome");
275-- CadastroLogin.java--             //preenchertabela("select * from usuarios where Usuario ='" + jTextField1log.getText()+"' order by id ");
275-- CadastroLogin.java--         preenchertabela("select * from login order by nome");
275-- CadastroLogin.java--         preenchertabela("select * from login order by nome");
275-- CancelaReuniao.java--        // preenchertabela("select * from reuniao order by idreuniao");
275-- CancelaReuniao.java--        //preenchertabela("select * from reuniao where solicitante ='AndrÃ©ia' and STR_TO_DATE(datainicio, '%d/%m/%Y') order by SUBSTR( datainicio, -4,4),SUBSTR( datainicio, -7,2),SUBSTR( datainicio, -10,2),SUBSTR( datainicio, -9,1),SUBSTR( datainicio, -8,1)");
275-- CancelaReuniao.java--             preenchertabela("select * from reuniao where solicitante ='AndrÃ©ia' and STR_TO_DATE(datainicio, '%d/%m/%Y') order by SUBSTR( datainicio, -4,4),SUBSTR( datainicio, -7,2),SUBSTR( datainicio, -10,2),SUBSTR( datainicio, -9,1),SUBSTR( datainicio, -8,1)");
275-- CancelaReuniao.java--             preenchertabela("select * from reuniao where solicitante ='AndrÃ©ia' and STR_TO_DATE(datainicio, '%d/%m/%Y') order by SUBSTR( datainicio, -4,4),SUBSTR( datainicio, -7,2),SUBSTR( datainicio, -10,2),SUBSTR( datainicio, -9,1),SUBSTR( datainicio, -8,1)");
275-- CancelaReuniao.java--        // preenchertabela("select * from reuniao where solicitante ='AndrÃ©ia' and STR_TO_DATE(datainicio, '%d/%m/%Y') order by SUBSTR( datainicio, -4,4),SUBSTR( datainicio, -7,2),SUBSTR( datainicio, -10,2),SUBSTR( datainicio, -9,1),SUBSTR( datainicio, -8,1)");
275-- CancelaReuniao.java--        preenchertabela("select reuniao.* from reuniao INNER JOIN login on reuniao.solicitante = login.login where login = '" + JtextUser.getText()+"' and STR_TO_DATE(datainicio, '%d/%m/%Y') order by SUBSTR( datainicio, -4,4),SUBSTR( datainicio, -7,2),SUBSTR( datainicio, -10,2),SUBSTR( datainicio, -9,1),SUBSTR( datainicio, -8,1)");
275-- CancelaReuniao.java--         preenchertabela("select reuniao.* from reuniao INNER JOIN login on reuniao.solicitante = login.login where login = '" + JtextUser.getText()+"' and STR_TO_DATE(datainicio, '%d/%m/%Y') order by SUBSTR( datainicio, -4,4),SUBSTR( datainicio, -7,2),SUBSTR( datainicio, -10,2),SUBSTR( datainicio, -9,1),SUBSTR( datainicio, -8,1)");
275-- ConsultaLigacoes.java--         preenchertabela("select * from solicitacoes order by id");
275-- Consultador.java--      //  preenchertabela("select * from usuarios where Usuario ='" + jTextField1log.getText()+"' order by id");
275-- Consultador.java--         //preenchertabela("select * from usuarios order by id");
275-- Consultador.java--        preenchertabela("select * from empresas order by Company");
275-- Consultador.java--         //preenchertabela("select * from usuarios order by id");
275-- Consultador.java--         preenchertabelaa("select * from empresas order by Company ");
275-- Consultador.java--         // where Usuario ='" + jTextField1log.getText()+"' order by id ");
275-- Consultador.java--                             //preenchertabela("select * from usuarios order by id");
275-- Consultador.java--                             preenchertabelaa("select * from empresas order by Company ");
275-- Consultador.java--                             // usuarios where Usuario ='" + jTextField1log.getText()+"' order by id ");    
275-- Consultador.java--             //preenchertabela("select * from usuarios order by id");
275-- Consultador.java--             preenchertabelaa("select * from empresas order by Company ");
275-- Consultador.java--             //preenchertabela("select * from usuarios order by id");
275-- Consultador.java--             preenchertabelaa("select * from empresas order by Company ");
275-- Consultador.java--         //preenchertabela("select * from usuarios order by id");
275-- Consultador.java--         preenchertabela("select * from usuarios where Usuario ='" + jTextField1log.getText()+"' order by id ");
275-- Consultador.java--             //preenchertabela("select * from usuarios order by id");
275-- Consultador.java--            // preenchertabela("select * from clientes order by Clientes_id");
275-- Consultador.java--             //preenchertabela("select * from usuarios order by id");
275-- Consultador.java--             // preenchertabela("select * from usuarios where Usuario ='" + jTextField1log.getText()+"' order by id ");
275-- Consultador.java--            // preenchertabela("select * from clientes order by Clientes_id");
275-- Consultador.java--                             //preenchertabela("select * from usuarios order by id");
275-- Consultador.java--                          //   preenchertabela("select * from clientes order by Clientes_id");
275-- Consultador.java--                             // usuarios where Usuario ='" + jTextField1log.getText()+"' order by id ");    
275-- Consultador.java--         //preenchertabela("select * from usuarios order by id");
275-- Consultador.java--         preenchertabela("select * from clientes order by Clientes_id ");
275-- Consultador.java--         // where Usuario ='" + jTextField1log.getText()+"' order by id ");
275-- Consultador.java-- //          // preenchertabela("select * from usuarios where Usuario ='" + jTextField1log.getText()+"' order by id ");
275-- ConfirmacaoRecebimento.java--        //preenchertabela("select * from usuarios where destinatario = 'TDP' and recebimento = 'NÃ£o recebido' order by id");
275-- ConfirmacaoRecebimento.java--             preenchertabela("select usuarios.* from usuarios INNER JOIN login on usuarios.destinatario = login.area where login = '" + jTextFieldBaixa.getText()+"' and recebimento = 'NÃ£o recebido' order by id");
275-- ConfirmacaoRecebimento.java-- //            preenchertabela("select * from usuarios where destinatario = 'Gustavo' and recebimento = 'NÃ£o recebido' order by id");
275-- ConfirmacaoRecebimento.java--        preenchertabela("select usuarios.* from usuarios INNER JOIN login on usuarios.destinatario = login.area || usuarios.destinatario = login.subarea || usuarios.departamento = login.depart where login = '" + jTextFieldBaixa.getText()+"' and recebimento = 'NÃ£o recebido' order by id");
275-- EntrevistaFinaliza.java--       //  preenchertabela("select * from Projetos order by Instant_Status ASC, Person ASC");
275-- EntrevistaFinaliza.java--        // preenchertabela1("select * from Clientes order by Person_A_e_B_Encore_2017 ");
275-- EntrevistaFinaliza.java--                 rs=st.executeQuery("SELECT DISTINCT Projeto from Projetos where Estatus_Geral = 'Aberto' order by Projeto");
275-- EntrevistaFinaliza.java--      // preenchertabela("select * from Projetos order by Instant_Status ASC, Person ASC");
275-- EntrevistaFinaliza.java--       // where Usuario ='" + jTextField1log.getText()+"' order by id ");
275-- EntrevistaFinaliza.java--             preenchertabela("select * from projetos where Projeto Like '%" + jTextFieldProjeto.getText() + "%' order by Instant_Status ASC, Person ASC");
275-- EntrevistaFinaliza.java--             //preenchertabela("select * from usuarios order by id");
275-- EntrevistaFinaliza.java--            // preenchertabela("select * from entrevistas where Usuario ='" + jTextFieldUsuario.getText()+"' order by idEntrevistas ");
275-- EntrevistaFinaliza.java--       //  preenchertabela("select * from Projetos order by Instant_Status ASC, Person ASC ");
275-- EntrevistaFinaliza.java-- //                rs=st.executeQuery("SELECT DISTINCT Projeto from Projetos order by Projeto");
275-- EntrevistaFinaliza.java--         conecta.executaSQL("select * from Projetos where Projetos_id='"+ IdProjetos +"'order by Instant_Status ASC, Person ASC");
275-- EntrevistaFinaliza.java--         //preenchertabela("select * from usuarios order by id");
275-- EntrevistaFinaliza.java--         preenchertabela("select * from Projetos where projeto ='" + jTextFieldProjeto.getText()+"' order by Instant_Status ASC, Person ASC");
275-- EntrevistaFinaliza.java--             // usuarios where Usuario ='" + jTextField1log.getText()+"' order by id ");    
275-- EntrevistaFinaliza.java-- //                rs=st.executeQuery("SELECT DISTINCT Projeto from Projetos order by Projeto");
275-- EntrevistaFinaliza.java--            // preenchertabela("select * from Projetos order by Instant_Status ASC, Person ASC");
275-- EntrevistaFinaliza.java--            // preenchertabela("select usuarios.* from usuarios INNER JOIN login on usuarios.destinatario = login.area where login = '" + jTextFieldBaixa.getText()+"' and recebimento = 'NÃ£o recebido' order by id");
275-- EntrevistaFinaliza.java--             //preenchertabela("select * from usuarios order by id");
275-- EntrevistaFinaliza.java--            // preenchertabela("select * from Projetos order by Instant_Status ASC, Person ASC ");
275-- EntrevistaFinaliza.java-- //                rs=st.executeQuery("SELECT DISTINCT Projeto from Projetos order by Projeto");
275-- EntrevistaFinaliza.java-- //        preenchertabela("select * from Projetos where Projeto like '%" + jComboBoxProjetos.getSelectedItem() + "%' order by Instant_Status ASC, Person ASC");
275-- EntrevistaFinaliza.java--                 rs=st.executeQuery("SELECT DISTINCT Projeto from Projetos where Estatus_Geral = 'Aberto' order by Projeto");
275-- EntrevistaFinaliza.java--         //preenchertabela("select * from usuarios order by id");
275-- EntrevistaFinaliza.java--         preenchertabela("select * from Projetos where projeto ='" + jTextFieldProjeto.getText()+"' order by Instant_Status ASC, Person ASC");
275-- EntrevistaFinaliza.java--             // usuarios where Usuario ='" + jTextField1log.getText()+"' order by id ");    
275-- EntrevistaFinaliza.java--         //preenchertabela("select * from usuarios order by id");
275-- EntrevistaFinaliza.java--         //preenchertabela("select * from Projetos where projeto ='" + jTextFieldProjeto.getText()+"' order by Instant_Status ASC, Person ASC");
275-- EntrevistaFinaliza.java--             // usuarios where Usuario ='" + jTextField1log.getText()+"' order by id ");    
275-- EntrevistaFinaliza.java--                 rs=st.executeQuery("SELECT DISTINCT Projeto from Projetos where Estatus_Geral = 'Fechado' order by Projeto");
275-- EnvioEmail.java--         preenchertabela("select * from usuarios where recebimento in ('NÃ£o recebido') order by departamento;");
275-- Lembrete.java--         preenchertabela("select * from usuarios where destinatario = 'thais' and recebimento = 'NÃ£o recebido' order by id");
275-- Menu.java--             conecta.executaSQL("select * from usuarios order by data");
275-- Menu.java--             conecta.executaSQL("select * from usuarios where recebimento in ('NÃ£o recebido') order by departamento");
275-- Menu.java--             conecta.executaSQL("select * from usuarios where destinatario = 'TDP' and recebimento = 'NÃ£o recebido' order by id");
275-- Menu.java-- //            conecta.executaSQL("select * from reuniao order by SUBSTR( datainicio, 7,4),SUBSTR( datainicio, 4,2),SUBSTR( datainicio, 1,2)");
275-- NovoTesteJanela.java--             //conecta.executaSQL("select * from reuniao where STR_TO_DATE(datainicio, '%d/%m/%Y') BETWEEN '" + jDateChooser1.getDate().toString() + "' and '" + jDateChooser2.getDate().toString() + "' order by SUBSTR( datainicio, 7,4),SUBSTR( datainicio, 4,2),SUBSTR( datainicio, 1,2)");
275-- NovoTesteJanela.java--             conecta.executaSQL("select * from reuniao where STR_TO_DATE(datainicio, '%d/%m/%Y') BETWEEN '" + jTextField1.getText() + "' and '" + jTextField2.getText() + "' order by SUBSTR( datainicio, -4,4),SUBSTR( datainicio, -7,2),SUBSTR( datainicio, -10,2),SUBSTR( datainicio, -9,1),SUBSTR( datainicio, -8,1)");
275-- NovoTesteJanela.java--             //conecta.executaSQL("select * from reuniao where date_format(datainicio, '%d/%m/%Y') BETWEEN '" + jTextField1.getText() + "' and '" + jTextField2.getText() + "' order by datainicio");
275-- NovoTesteJanela.java--             //conecta.executaSQL("select * from reuniao where STR_TO_DATE(datainicio, '%d/%m/%Y') BETWEEN '" + jDateChooser1.getDate().toString() + "' and '" + jDateChooser2.getDate().toString() + "' order by SUBSTR( datainicio, 7,4),SUBSTR( datainicio, 4,2),SUBSTR( datainicio, 1,2)");
275-- NovoTesteJanela.java--             conecta.executaSQL("select * from reuniao where STR_TO_DATE(datainicio, '%d/%m/%Y') BETWEEN '" + jTextField1.getText() + "' and '" + jTextField2.getText() + "' order by SUBSTR( datainicio, -4,4),SUBSTR( datainicio, -7,2),SUBSTR( datainicio, -10,2),SUBSTR( datainicio, -9,1),SUBSTR( datainicio, -8,1)");
275-- NovoTesteJanela.java--             //conecta.executaSQL("select * from reuniao where date_format(datainicio, '%d/%m/%Y') BETWEEN '" + jTextField1.getText() + "' and '" + jTextField2.getText() + "' order by datainicio");
275-- VisualizadorPro.java--         preenchertabela("select * from Projetos order by Instant_Status ASC, Person ASC");
275-- VisualizadorPro.java--                 rs=st.executeQuery("SELECT DISTINCT Projeto from Projetos order by Projeto");
275-- VisualizadorPro.java--             preenchertabela("select * from projetos where Salary like '%" + jTextFieldSalario.getText() + "%' order by Instant_Status ASC, Person ASC");
275-- VisualizadorPro.java--         preenchertabela("select * from projetos order by Instant_Status ASC, Person ASC");
275-- VisualizadorPro.java--             preenchertabela("select * from projetos where Person like '%" + jTextFieldEmprego.getText() + "%' order by Instant_Status ASC, Person ASC");
275-- VisualizadorPro.java--             preenchertabela("select * from projetos where Empresa like '%" + jTextFieldEmpresa.getText() + "%' order by Instant_Status ASC, Person ASC");
275-- VisualizadorPro.java--             preenchertabela("select * from Projetos where Projeto like '%" + jTextFieldProjeto.getText() + "%' order by Instant_Status ASC, Person ASC");
275-- VisualizadorPro.java--         conecta.executaSQL("select * from Projetos where Projetos_id='"+ IdProjeto +"'order by Instant_Status ASC, Person ASC");
275-- VisualizadorProfissionais.java--         preenchertabela("select * from clientes order by Person_A_e_B_Encore_2017");
275-- VisualizadorProfissionais.java--         preenchertabela("select * from clientes order by Person_A_e_B_Encore_2017");
280-- FormContasFinanceiras.java--             ResultSet rsConFin = cc.stm.executeQuery("select * from v_receitadespesa "+where+" order by rd_codico limit 10 offset "+offset);
280-- FormLancamentoFinanceiro.java--             ResultSet rsConFin = cc.stm.executeQuery("select * from lancamento_financeiro "+where+" order by nome limit 25");
167-- ConsultaPagamentoFragment.java-- 						"select _id, ds_pagamento from pagamento order by ds_pagamento",
167-- ConsultaCagetoria.java-- 						"select _id, ds_categoria from categoria order by ds_categoria",
167-- ConsultaCagetoriaFragment.java-- 						"select _id, ds_categoria from categoria order by ds_categoria",
167-- ConsultaFormaPagamento.java-- 						"select _id, ds_pagamento from pagamento order by ds_pagamento",
167-- FiltroRelatFinanceiroFragment.java-- 		Cursor cursor = dbexe.rawQuery("SELECT _id, ds_categoria FROM categoria order by ds_categoria",	null);
167-- FiltroRelatFinanceiroFragment.java-- 		Cursor cursor = dbexe2.rawQuery("SELECT _id, ds_pagamento FROM pagamento order by ds_pagamento",	null);
167-- FiltroRelatFinanceiro.java-- 		Cursor cursor = dbexe.rawQuery("SELECT _id, ds_categoria FROM categoria order by ds_categoria",	null);
167-- FiltroRelatFinanceiro.java-- 		Cursor cursor = dbexe2.rawQuery("SELECT _id, ds_pagamento FROM pagamento order by ds_pagamento",	null);
167-- GerenciarLocalizacao.java-- 						"select _id, vl_latitudec, vl_longitudec,dt_lancamento,hr_lancamento,ds_usuario from coordenadagps order by _id desc ",
167-- LancaDespesaFragment.java-- 					"SELECT _id FROM categoria where ds_categoria=\""+ cd_cat +"\" order by ds_categoria", null);
167-- LancaDespesaFragment.java-- 					"SELECT _id FROM pagamento where ds_pagamento=\""+ cd_pag +"\" order by ds_pagamento", null);
167-- LancaDespesaFragment.java-- 				"SELECT _id, ds_categoria FROM categoria order by ds_categoria", null);
167-- LancaDespesaFragment.java-- 				"SELECT _id, ds_pagamento FROM pagamento order by ds_pagamento", null);
167-- LancaDespesa.java-- 					"SELECT _id FROM categoria where ds_categoria=\""+ cd_cat +"\" order by ds_categoria", null);
167-- LancaDespesa.java-- 					"SELECT _id FROM pagamento where ds_pagamento=\""+ cd_pag +"\" order by ds_pagamento", null);
167-- LancaDespesa.java-- 				"SELECT _id, ds_categoria FROM categoria order by ds_categoria", null);
167-- LancaDespesa.java-- 				"SELECT _id, ds_pagamento FROM pagamento order by ds_pagamento", null);
167-- RelatorioFinanceiroFragment.java-- 					"SELECT _id FROM categoria where ds_categoria=\""+ categoria +"\" order by ds_categoria", null);
167-- RelatorioFinanceiroFragment.java-- 					"SELECT _id FROM pagamento where ds_pagamento=\""+ pagamento +"\" order by ds_pagamento", null);
167-- RelatorioFinanceiroFragment.java-- 		strsql = strsql + "  order by a.dt_lancamento";
167-- RelatorioFinanceiroFragment.java-- 					"SELECT _id FROM categoria where ds_categoria=\""+ categoria +"\" order by ds_categoria", null);
167-- RelatorioFinanceiroFragment.java-- 					"SELECT _id FROM pagamento where ds_pagamento=\""+ pagamento +"\" order by ds_pagamento", null);
167-- RelatorioFinanceiro.java-- 					"SELECT _id FROM categoria where ds_categoria=\""+ categoria +"\" order by ds_categoria", null);
167-- RelatorioFinanceiro.java-- 					"SELECT _id FROM pagamento where ds_pagamento=\""+ pagamento +"\" order by ds_pagamento", null);
167-- RelatorioFinanceiro.java-- 		strsql = strsql + "  order by a.dt_lancamento";
167-- RelatorioFinanceiro.java-- 					"SELECT _id FROM categoria where ds_categoria=\""+ categoria +"\" order by ds_categoria", null);
167-- RelatorioFinanceiro.java-- 					"SELECT _id FROM pagamento where ds_pagamento=\""+ pagamento +"\" order by ds_pagamento", null);
288-- Phone.java--     public int compareTo(Phone o) {
440-- DependenteDAO.java--         this.selectTodos = con.getConnection().prepareStatement("select * from dependente order by nome;");
440-- PessoaDAO.java--         this.selectTodos = con.getConnection().prepareStatement("select * from pessoa order by nome;");
550-- Pessoa.java--     public int compareTo(Pessoa o) {
327-- PrincipalController.java--             if (c.getDtVencimento().getMonth().compareTo(LocalDate.now().getMonth()) <= 0) {
554-- Whitelist.java--                 if (origin.compareTo("*") == 0) {
67-- FlatLand.java-- 		        Collections.sort(stations);
67-- MinMax.java-- 		Collections.sort(lista);
67-- MiniMaxSum.java-- 		Collections.sort(nums);
67-- CutTheSticks.java-- 		Collections.sort(unique);
67-- Template.java--         public int compare(Integer k1, Integer k2) {
67-- Template.java--             int num = val1.compareTo(val2)  ;
67-- Template.java--             return  num == 0 ? k1.compareTo(k2)   : num;
295-- Pessoa.java--     public int compareTo(Pessoa pessoa) {
295-- Pessoa.java--         return nome.compareTo(pessoa.nome);
295-- Usuario.java--     public int compareTo(Usuario other) {
295-- Usuario.java--         return nome.compareTo(other.getNome());
295-- ListaPessoasPresenter.java--             Collections.sort(lista, new ComparadorDeTelefonePessoa());
295-- ComparadorDeTelefonePessoa.java--    public int compare(Pessoa aPerson, Pessoa anotherPerson) {
295-- ComparadorDeTelefonePessoa.java--       return aPerson.getTelefone().compareTo(anotherPerson.getTelefone());
433-- GuestRules.java--             .sorted((o1, o2) -> o1.getHeight().compareTo(o2.getHeight()))
433-- GuestRules.java--             .sorted((o1, o2) -> o1.getHeight().compareTo(o2.getHeight()))
137-- Categoria.java-- 	@org.hibernate.annotations.OrderBy(clause = "descricao asc")
312-- DatabaseMetaData.java-- 														.compareTo(foreignTableWithCase) != 0) {
312-- DatabaseMetaData.java-- 														.compareTo(primaryTableWithCase) != 0) {
312-- DatabaseMetaData.java-- 	public int getMaxColumnsInOrderBy() throws SQLException {
312-- DatabaseMetaData.java-- 					Collections.sort(proceduresToExtractList);					
312-- DatabaseMetaData.java-- 				// Required to be sorted in name-order by JDBC spec,
312-- DatabaseMetaData.java-- 				//Collections.sort(proceduresToExtractList);
312-- DatabaseMetaData.java-- 	public boolean supportsExpressionsInOrderBy() throws SQLException {
312-- DatabaseMetaData.java-- 	public boolean supportsOrderByUnrelated() throws SQLException {
312-- ResultSetImpl.java-- 					((asBigInt.compareTo(new BigInteger(String.valueOf(Long.MAX_VALUE))) > 0 ) ||
312-- ResultSetImpl.java-- 					 (asBigInt.compareTo(new BigInteger(String.valueOf(Long.MIN_VALUE))) < 0))) {
312-- ResultSetImpl.java-- 					((asBigInt.compareTo(new BigInteger(String.valueOf(Short.MAX_VALUE))) > 0 ) ||
312-- ResultSetImpl.java-- 					 (asBigInt.compareTo(new BigInteger(String.valueOf(Short.MIN_VALUE))) < 0))) {
312-- ResultSetRegressionTest.java-- 	 * Tests fix for BUG#2654, "Column 'column.table' not found" when "order by"
312-- ResultSetRegressionTest.java-- 					+ "foo.id = bar.id order by foo.id";
312-- StressRegressionTest.java-- 			Collections.sort(elapsedTimes);
651-- NetworkRepositoryImpl.java--         Collections.sort(keys);
311-- Metodos.java--         Collections.sort(lista1); //Ordena os objetos por nome// 
311-- PessoasContato.java--     public int compareTo(PessoasContato o) {
311-- PessoasContato.java--         return this.nome.compareTo(o.getNome());
509-- TelaOS.java--         String sql = "select * from tbos order by os desc";
101-- Fquarto.java--                 + "order by idquarto";
101-- Ffuncionario.java--                 + "values ((select id from funcionario order by id desc limit 1),?)";
101-- Fusuario.java--                 + "values ((select id from usuario order by id desc limit 1),?)";
101-- Fpessoa.java--                 + "values ((select id from pessoa order by id desc limit 1),?)";
630-- FeedAdapter.java--         public int compare(DataSnapshot data1, DataSnapshot data2) {
252-- MainFrame.java-- 	private ButtonGroup btgOrderBy;
252-- MainFrame.java-- 	private JLabel lblOrderBy;
252-- MainFrame.java-- 				                .addComponent(getLblOrderBy(), GroupLayout.PREFERRED_SIZE, 55, GroupLayout.PREFERRED_SIZE)
252-- MainFrame.java-- 				    .addComponent(getLblOrderBy(), GroupLayout.Alignment.BASELINE, GroupLayout.PREFERRED_SIZE, GroupLayout.PREFERRED_SIZE, GroupLayout.PREFERRED_SIZE))
252-- MainFrame.java-- 	private JLabel getLblOrderBy() {
252-- MainFrame.java-- 		if(lblOrderBy == null) {
252-- MainFrame.java-- 			lblOrderBy = new JLabel();
252-- MainFrame.java-- 			lblOrderBy.setText("Orderby");
252-- MainFrame.java-- 		return lblOrderBy;
252-- MainFrame.java-- 			getBtgOrderBy().add(rbtNomeOrder);
252-- MainFrame.java-- 			getBtgOrderBy().add(rbtCpfOrder);
252-- MainFrame.java-- 	private ButtonGroup getBtgOrderBy() {
252-- MainFrame.java-- 		if(btgOrderBy == null) {
252-- MainFrame.java-- 			btgOrderBy = new ButtonGroup();
252-- MainFrame.java-- 		return btgOrderBy;
460-- PessoaDAO.java-- 				"from Pessoa order by nome");
460-- RelacionamentoPessoaDAO.java-- 				"from RelacionamentoPessoa order by nome");
460-- TipoRelacionamentoDAO.java-- 				"from TipoRelacionamento order by nome");
668-- UserQuery.java--     @NamedQuery(name = Constants.LIST_QUERY, query = "select q from UserQuery q where q.createdBy.userId = :createdBy and q.deletedDt is null order by q.id"),
668-- MessageStatusRepository.java--                     "order by m.create_date asc  limit :theLimit")
668-- PassengerRepositoryImpl.java--                 + " order by d1.created_at desc";
668-- CaseDispositionServiceImpl.java--         generalCaseCommentVoSet.sort(comparing(GeneralCaseCommentVo::getCreatedAt).reversed());
668-- CaseDispositionServiceImpl.java--                     _tempHitsDispCommentsVoSet.sort(comparing(HitsDispositionCommentsVo::getCreatedAt).reversed());
668-- CaseDispositionServiceImpl.java--         // _tempReturnHitsDispSet.stream().sorted(Comparator.comparing(HitsDispositionVo::getHit_disp_id)).collect(Collectors.toSet());
668-- CaseDispositionServiceImpl.java--                 .sorted(Comparator.comparing(HitsDispositionVo::getHit_disp_id)).collect(Collectors.toList());
668-- CaseDispositionServiceImpl.java--                 .sorted(Comparator.comparing(HitsDispositionVo::getHit_disp_id)).collect(Collectors.toList()));
668-- RuleCatServiceImpl.java--             _tempRuleCat = _tempRuleCatSet.stream().sorted(Comparator.comparing(RuleCat::getPriority))
668-- MatchingContext.java-- 			return travelerDob.compareTo(derogDob) == 0;
668-- ElasticHelper.java-- 		rv.sort((o1,o2)->o1.getEta().compareTo(o2.getEta())*-1);
668-- ElasticHelper.java-- 		rv.sort((o1,o2)->o1.getEta().compareTo(o2.getEta())*-1);
668-- Bench.java--                .sorted((t1,t2) -> t2.getElapsedTime().compareTo(t1.getElapsedTime()))
668-- Bench.java--                .sorted((t1,t2) -> t2.getElapsedTime().compareTo(t1.getElapsedTime()))
668-- EntityResolverUtils.java--                     if (doc.getExpirationDate().compareTo(now) > 0)
668-- PnrUtils.java--         ssrDocs.sort(Comparator.comparing(SSRDocs::getSsrDocsType).reversed());
668-- LoaderUtils.java--     	flights.sort(Comparator.comparing(FlightVo::getEtd));
485-- Permissao.java-- 		Collections.sort(permissoes, new Comparator<Permissao>(){
485-- Permissao.java-- 			public int compare(Permissao o1, Permissao o2) {
485-- Permissao.java-- 				return new Integer(o1.ordinal()).compareTo(o2.ordinal());
485-- ObjetoCampoPesquisa.java-- 	public int compare(ObjetoCampoPesquisa o1, ObjetoCampoPesquisa o2) {
485-- ObjetoCampoPesquisa.java-- 		return ((ObjetoCampoPesquisa) o1).getPrincipal().compareTo(((ObjetoCampoPesquisa) o2).getPrincipal());
350-- PessoaDAO.java--         return em.createQuery("from Pessoa order by id").getResultList();
299-- Phone.java--     public int compareTo(Phone o) {
381-- ExpensesAndIncomesAdapter.java--         Collections.sort(this.dates);
381-- RegisterCategoryActivity.java--                 || categoryFromDatabase.dataType.compareTo(category.dataType) != 0
291-- ConsultaInventario.java-- 							.compareTo(dataBanco.format(txfDataFinal.getDate()));
543-- Whitelist.java--                 if (origin.compareTo("*") == 0) {
483-- ControllerAtendimento.java--                 if (obj != null && obj.getDataAtendimento().compareTo(dataInicial) >= 0 && obj.getDataAtendimento().compareTo(dataFinal) <= 0) {
483-- ControllerAtendimento.java--                     int resp1 = obj.getDataAtendimento().compareTo(data);
483-- ControllerAtendimento.java--                     int resp2 = objTempoLimite.compareTo(data);
483-- ControllerAtendimento.java--                 int resp1 = obj.getDataAtendimento().compareTo(data);
483-- ControllerAtendimento.java--                 int resp2 = objTempoLimite.compareTo(data);
483-- ControllerAtendimento.java--             if (obj != null && obj.getDataAtendimento().compareTo(dataInicial) >= 0 && obj.getDataAtendimento().compareTo(dataFinal) <= 0) {
483-- ControllerVenda.java--             if(venda != null && venda.getEstado().equals("CONCLUIDO") && venda.getData().compareTo(inicio) >= 0 && venda.getData().compareTo(fim) <= 0)
483-- ControllerVenda.java--             if (venda.getData().compareTo(dataInicial) > 0 && venda.getData().compareTo(dataFinal) < 0) {
483-- TelaNovoAgendamento.java--             if (data.compareTo(Calendar.getInstance()) > 0) {
505-- AgendaAdpter.java--         Collections.sort(agendaLista, new Comparator<AgendaBean>() {
505-- AgendaAdpter.java--                 public int compare(AgendaBean obj1, AgendaBean obj2) {
505-- AgendaAdpter.java--                     return obj1.getData_Evento().compareTo(obj2.getData_Evento());
505-- ComentarioTopicoAdpter.java--         Collections.sort(comentarios, new Comparator<ComentarioForumBean> () {
505-- ComentarioTopicoAdpter.java--             public int compare(ComentarioForumBean obj1, ComentarioForumBean obj2) {
505-- ComentarioTopicoAdpter.java--                 return obj1.getData_criacao().compareTo(obj2.getData_criacao());
523-- Examples.java--         System.out.println("Compare millisecond:  in.compareTo(in2):        " + in.compareTo(in2));
523-- Examples.java--         System.out.println("Compare millisecond:  in.compareTo(in2):        " + in.compareTo(in2));
523-- TimeZoneTable.java--             Arrays.sort(zones);
523-- TimeZoneTable.java--         public int compareTo(Object obj) {
523-- TimeZoneTable.java--             int result = getCanonicalID().compareTo(other.getCanonicalID());
523-- TimeZoneTable.java--             return getID().compareTo(other.getID());
523-- DateTimeComparator.java--     public int compare(Object lhsObj, Object rhsObj) {
523-- LocalDateTime.java--     public int compareTo(ReadablePartial partial) {
523-- LocalDateTime.java--         return super.compareTo(partial);
523-- LocalDate.java--     public int compareTo(ReadablePartial partial) {
523-- LocalDate.java--         return super.compareTo(partial);
523-- LocalTime.java--     public int compareTo(ReadablePartial partial) {
523-- LocalTime.java--         return super.compareTo(partial);
523-- Partial.java--                 int compare = lastUnitField.compareTo(loopUnitField);
523-- Partial.java--                             if (lastRangeField.compareTo(loopRangeField) < 0) {
523-- Partial.java--                             if (lastRangeField.compareTo(loopRangeField) == 0) {
523-- Partial.java--                         int compare = unitField.compareTo(loopUnitField);
523-- Partial.java--                             if (rangeField.compareTo(loopRangeField) > 0) {
523-- ReadableDuration.java--  * The definition of the comparison is ascending order by millisecond duration.
523-- ReadableInstant.java--  * The definition of the comparison is ascending order by millisecond instant.
523-- AbstractPartial.java--     public int compareTo(ReadablePartial other) {
523-- AbstractDuration.java--     public int compareTo(ReadableDuration other) {
523-- AbstractInstant.java--     public int compareTo(ReadableInstant other) {
523-- BaseSingleFieldPeriod.java--     public int compareTo(BaseSingleFieldPeriod other) {
523-- DateTimeParserBucket.java--             Arrays.sort(array, 0, high);
523-- DateTimeParserBucket.java--                 for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {
523-- DateTimeParserBucket.java--         public int compareTo(SavedField obj) {
523-- DateTimeParserBucket.java--         return -a.compareTo(b);
523-- AbstractPartialFieldProperty.java--     public int compareTo(ReadableInstant instant) {
523-- AbstractPartialFieldProperty.java--     public int compareTo(ReadablePartial partial) {
523-- AbstractReadableInstantFieldProperty.java--     public int compareTo(ReadableInstant instant) {
523-- AbstractReadableInstantFieldProperty.java--     public int compareTo(ReadablePartial partial) {
523-- BaseDurationField.java--     public int compareTo(DurationField otherField) {
523-- DelegatedDurationField.java--     public int compareTo(DurationField durationField) {
523-- DelegatedDurationField.java--         return iField.compareTo(durationField);
523-- MillisDurationField.java--     public int compareTo(DurationField otherField) {
523-- UnsupportedDurationField.java--     public int compareTo(DurationField durationField) {
523-- MockPartial.java--     public int compareTo(ReadablePartial partial) {
523-- TestTimeOfDay_Properties.java--         assertEquals(true, test1.hourOfDay().compareTo(test2) < 0);
523-- TestTimeOfDay_Properties.java--         assertEquals(true, test2.hourOfDay().compareTo(test1) > 0);
523-- TestTimeOfDay_Properties.java--         assertEquals(true, test1.hourOfDay().compareTo(test1) == 0);
523-- TestTimeOfDay_Properties.java--             test1.hourOfDay().compareTo((ReadablePartial) null);
523-- TestTimeOfDay_Properties.java--         assertEquals(true, test1.hourOfDay().compareTo(dt2) < 0);
523-- TestTimeOfDay_Properties.java--         assertEquals(true, test2.hourOfDay().compareTo(dt1) > 0);
523-- TestTimeOfDay_Properties.java--         assertEquals(true, test1.hourOfDay().compareTo(dt1) == 0);
523-- TestTimeOfDay_Properties.java--             test1.hourOfDay().compareTo((ReadableInstant) null);
523-- TestTimeOfDay_Properties.java--         assertEquals(true, test1.minuteOfHour().compareTo(test2) < 0);
523-- TestTimeOfDay_Properties.java--         assertEquals(true, test2.minuteOfHour().compareTo(test1) > 0);
523-- TestTimeOfDay_Properties.java--         assertEquals(true, test1.minuteOfHour().compareTo(test1) == 0);
523-- TestTimeOfDay_Properties.java--             test1.minuteOfHour().compareTo((ReadablePartial) null);
523-- TestTimeOfDay_Properties.java--         assertEquals(true, test1.minuteOfHour().compareTo(dt2) < 0);
523-- TestTimeOfDay_Properties.java--         assertEquals(true, test2.minuteOfHour().compareTo(dt1) > 0);
523-- TestTimeOfDay_Properties.java--         assertEquals(true, test1.minuteOfHour().compareTo(dt1) == 0);
523-- TestTimeOfDay_Properties.java--             test1.minuteOfHour().compareTo((ReadableInstant) null);
523-- TestTimeOfDay_Properties.java--         assertEquals(true, test1.secondOfMinute().compareTo(test2) < 0);
523-- TestTimeOfDay_Properties.java--         assertEquals(true, test2.secondOfMinute().compareTo(test1) > 0);
523-- TestTimeOfDay_Properties.java--         assertEquals(true, test1.secondOfMinute().compareTo(test1) == 0);
523-- TestTimeOfDay_Properties.java--             test1.secondOfMinute().compareTo((ReadablePartial) null);
523-- TestTimeOfDay_Properties.java--         assertEquals(true, test1.secondOfMinute().compareTo(dt2) < 0);
523-- TestTimeOfDay_Properties.java--         assertEquals(true, test2.secondOfMinute().compareTo(dt1) > 0);
523-- TestTimeOfDay_Properties.java--         assertEquals(true, test1.secondOfMinute().compareTo(dt1) == 0);
523-- TestTimeOfDay_Properties.java--             test1.secondOfMinute().compareTo((ReadableInstant) null);
523-- TestTimeOfDay_Properties.java--         assertEquals(true, test1.millisOfSecond().compareTo(test2) < 0);
523-- TestTimeOfDay_Properties.java--         assertEquals(true, test2.millisOfSecond().compareTo(test1) > 0);
523-- TestTimeOfDay_Properties.java--         assertEquals(true, test1.millisOfSecond().compareTo(test1) == 0);
523-- TestTimeOfDay_Properties.java--             test1.millisOfSecond().compareTo((ReadablePartial) null);
523-- TestTimeOfDay_Properties.java--         assertEquals(true, test1.millisOfSecond().compareTo(dt2) < 0);
523-- TestTimeOfDay_Properties.java--         assertEquals(true, test2.millisOfSecond().compareTo(dt1) > 0);
523-- TestTimeOfDay_Properties.java--         assertEquals(true, test1.millisOfSecond().compareTo(dt1) == 0);
523-- TestTimeOfDay_Properties.java--             test1.millisOfSecond().compareTo((ReadableInstant) null);
523-- TestTimeOfDay_Basics.java--         assertEquals(0, test1.compareTo(test1a));
523-- TestTimeOfDay_Basics.java--         assertEquals(0, test1a.compareTo(test1));
523-- TestTimeOfDay_Basics.java--         assertEquals(0, test1.compareTo(test1));
523-- TestTimeOfDay_Basics.java--         assertEquals(0, test1a.compareTo(test1a));
523-- TestTimeOfDay_Basics.java--         assertEquals(-1, test1.compareTo(test2));
523-- TestTimeOfDay_Basics.java--         assertEquals(+1, test2.compareTo(test1));
523-- TestTimeOfDay_Basics.java--         assertEquals(-1, test1.compareTo(test3));
523-- TestTimeOfDay_Basics.java--         assertEquals(+1, test3.compareTo(test1));
523-- TestTimeOfDay_Basics.java--         assertEquals(0, test3.compareTo(test2));
523-- TestTimeOfDay_Basics.java--         assertEquals(0, test1.compareTo(p));
523-- TestTimeOfDay_Basics.java--             test1.compareTo(null);
523-- TestTimeOfDay_Basics.java-- //            test1.compareTo(new Date());
523-- TestLocalDate_Properties.java--         assertEquals(true, test1.year().compareTo(test2) < 0);
523-- TestLocalDate_Properties.java--         assertEquals(true, test2.year().compareTo(test1) > 0);
523-- TestLocalDate_Properties.java--         assertEquals(true, test1.year().compareTo(test1) == 0);
523-- TestLocalDate_Properties.java--             test1.year().compareTo((ReadablePartial) null);
523-- TestLocalDate_Properties.java--         assertEquals(true, test1.year().compareTo(dt2) < 0);
523-- TestLocalDate_Properties.java--         assertEquals(true, test2.year().compareTo(dt1) > 0);
523-- TestLocalDate_Properties.java--         assertEquals(true, test1.year().compareTo(dt1) == 0);
523-- TestLocalDate_Properties.java--             test1.year().compareTo((ReadableInstant) null);
523-- TestLocalDate_Properties.java--         assertEquals(true, test1.monthOfYear().compareTo(test2) < 0);
523-- TestLocalDate_Properties.java--         assertEquals(true, test2.monthOfYear().compareTo(test1) > 0);
523-- TestLocalDate_Properties.java--         assertEquals(true, test1.monthOfYear().compareTo(test1) == 0);
523-- TestLocalDate_Properties.java--             test1.monthOfYear().compareTo((ReadablePartial) null);
523-- TestLocalDate_Properties.java--         assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0);
523-- TestLocalDate_Properties.java--         assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0);
523-- TestLocalDate_Properties.java--         assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0);
523-- TestLocalDate_Properties.java--             test1.monthOfYear().compareTo((ReadableInstant) null);
523-- TestLocalDate_Properties.java--         assertEquals(true, test1.dayOfMonth().compareTo(test2) < 0);
523-- TestLocalDate_Properties.java--         assertEquals(true, test2.dayOfMonth().compareTo(test1) > 0);
523-- TestLocalDate_Properties.java--         assertEquals(true, test1.dayOfMonth().compareTo(test1) == 0);
523-- TestLocalDate_Properties.java--             test1.dayOfMonth().compareTo((ReadablePartial) null);
523-- TestLocalDate_Properties.java--         assertEquals(true, test1.dayOfMonth().compareTo(dt2) < 0);
523-- TestLocalDate_Properties.java--         assertEquals(true, test2.dayOfMonth().compareTo(dt1) > 0);
523-- TestLocalDate_Properties.java--         assertEquals(true, test1.dayOfMonth().compareTo(dt1) == 0);
523-- TestLocalDate_Properties.java--             test1.dayOfMonth().compareTo((ReadableInstant) null);
523-- TestDateTimeComparator.java--         Collections.sort( sl );
523-- TestDateTimeComparator.java--         Collections.sort( sl, cMillis );
523-- TestDateTimeComparator.java--         Collections.sort( sl, cSecond );
523-- TestDateTimeComparator.java--         Collections.sort( sl, cMinute );
523-- TestDateTimeComparator.java--         Collections.sort( sl, cHour );
523-- TestDateTimeComparator.java--         Collections.sort( sl, cDayOfWeek );
523-- TestDateTimeComparator.java--         Collections.sort( sl, cDayOfMonth );
523-- TestDateTimeComparator.java--         Collections.sort( sl, cDayOfYear );
523-- TestDateTimeComparator.java--         Collections.sort( sl, cWeekOfWeekyear );
523-- TestDateTimeComparator.java--         Collections.sort( sl, cWeekyear );
523-- TestDateTimeComparator.java--         Collections.sort( sl, cMonth );
523-- TestDateTimeComparator.java--         Collections.sort( sl, cYear );
523-- TestDateTimeComparator.java--         Collections.sort( sl, cDate );
523-- TestDateTimeComparator.java--         Collections.sort( sl, cTime );
523-- TestDateTimeComparator.java--             if ( lhVal.compareTo( rhVal) > 0 ) return false;
523-- TestPeriod_Basics.java--         assertTrue(expected.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) < 0);
523-- TestPeriod_Basics.java--         assertTrue(expected.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) < 0);
523-- TestPeriod_Basics.java--         assertTrue(expected.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) < 0);
523-- TestPeriod_Basics.java--         assertTrue(expected.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) < 0);
523-- TestPeriod_Basics.java--         assertTrue(exp.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) < 0);
523-- TestYearMonthDay_Properties.java--         assertEquals(true, test1.year().compareTo(test2) < 0);
523-- TestYearMonthDay_Properties.java--         assertEquals(true, test2.year().compareTo(test1) > 0);
523-- TestYearMonthDay_Properties.java--         assertEquals(true, test1.year().compareTo(test1) == 0);
523-- TestYearMonthDay_Properties.java--             test1.year().compareTo((ReadablePartial) null);
523-- TestYearMonthDay_Properties.java--         assertEquals(true, test1.year().compareTo(dt2) < 0);
523-- TestYearMonthDay_Properties.java--         assertEquals(true, test2.year().compareTo(dt1) > 0);
523-- TestYearMonthDay_Properties.java--         assertEquals(true, test1.year().compareTo(dt1) == 0);
523-- TestYearMonthDay_Properties.java--             test1.year().compareTo((ReadableInstant) null);
523-- TestYearMonthDay_Properties.java--         assertEquals(true, test1.monthOfYear().compareTo(test2) < 0);
523-- TestYearMonthDay_Properties.java--         assertEquals(true, test2.monthOfYear().compareTo(test1) > 0);
523-- TestYearMonthDay_Properties.java--         assertEquals(true, test1.monthOfYear().compareTo(test1) == 0);
523-- TestYearMonthDay_Properties.java--             test1.monthOfYear().compareTo((ReadablePartial) null);
523-- TestYearMonthDay_Properties.java--         assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0);
523-- TestYearMonthDay_Properties.java--         assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0);
523-- TestYearMonthDay_Properties.java--         assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0);
523-- TestYearMonthDay_Properties.java--             test1.monthOfYear().compareTo((ReadableInstant) null);
523-- TestYearMonthDay_Properties.java--         assertEquals(true, test1.dayOfMonth().compareTo(test2) < 0);
523-- TestYearMonthDay_Properties.java--         assertEquals(true, test2.dayOfMonth().compareTo(test1) > 0);
523-- TestYearMonthDay_Properties.java--         assertEquals(true, test1.dayOfMonth().compareTo(test1) == 0);
523-- TestYearMonthDay_Properties.java--             test1.dayOfMonth().compareTo((ReadablePartial) null);
523-- TestYearMonthDay_Properties.java--         assertEquals(true, test1.dayOfMonth().compareTo(dt2) < 0);
523-- TestYearMonthDay_Properties.java--         assertEquals(true, test2.dayOfMonth().compareTo(dt1) > 0);
523-- TestYearMonthDay_Properties.java--         assertEquals(true, test1.dayOfMonth().compareTo(dt1) == 0);
523-- TestYearMonthDay_Properties.java--             test1.dayOfMonth().compareTo((ReadableInstant) null);
523-- TestLocalDateTime_Basics.java--         assertEquals(0, test1.compareTo(test1a));
523-- TestLocalDateTime_Basics.java--         assertEquals(0, test1a.compareTo(test1));
523-- TestLocalDateTime_Basics.java--         assertEquals(0, test1.compareTo(test1));
523-- TestLocalDateTime_Basics.java--         assertEquals(0, test1a.compareTo(test1a));
523-- TestLocalDateTime_Basics.java--         assertEquals(-1, test1.compareTo(test2));
523-- TestLocalDateTime_Basics.java--         assertEquals(+1, test2.compareTo(test1));
523-- TestLocalDateTime_Basics.java--         assertEquals(-1, test1.compareTo(test3));
523-- TestLocalDateTime_Basics.java--         assertEquals(+1, test3.compareTo(test1));
523-- TestLocalDateTime_Basics.java--         assertEquals(0, test3.compareTo(test2));
523-- TestLocalDateTime_Basics.java--         assertEquals(0, test1.compareTo(p));
523-- TestLocalDateTime_Basics.java--             test1.compareTo(null);
523-- TestLocalDateTime_Basics.java-- //            test1.compareTo(new Date());
523-- TestLocalDateTime_Basics.java--             test1.compareTo(ymd);
523-- TestLocalDateTime_Basics.java--             test1.compareTo(tod);
523-- TestLocalDateTime_Basics.java--             new LocalDateTime(1970, 6, 9, 10, 20, 30, 40).compareTo(partial);
523-- TestPartial_Basics.java--         assertEquals(0, test1.compareTo(test1a));
523-- TestPartial_Basics.java--         assertEquals(0, test1a.compareTo(test1));
523-- TestPartial_Basics.java--         assertEquals(0, test1.compareTo(test1));
523-- TestPartial_Basics.java--         assertEquals(0, test1a.compareTo(test1a));
523-- TestPartial_Basics.java--         assertEquals(-1, test1.compareTo(test2));
523-- TestPartial_Basics.java--         assertEquals(+1, test2.compareTo(test1));
523-- TestPartial_Basics.java--         assertEquals(-1, test1.compareTo(test3));
523-- TestPartial_Basics.java--         assertEquals(+1, test3.compareTo(test1));
523-- TestPartial_Basics.java--         assertEquals(0, test3.compareTo(test2));
523-- TestPartial_Basics.java--         assertEquals(0, new TimeOfDay(10, 20, 30, 40).compareTo(createTODPartial(ISO_UTC)));
523-- TestPartial_Basics.java--             test1.compareTo(null);
523-- TestPartial_Basics.java-- //            test1.compareTo(new Date());
523-- TestPartial_Basics.java--             test1.compareTo(new YearMonthDay());
523-- TestPartial_Basics.java--             createTODPartial(ISO_UTC).without(DateTimeFieldType.hourOfDay()).compareTo(new YearMonthDay());
523-- TestLocalDate_Basics.java--         assertEquals(0, test1.compareTo(test1a));
523-- TestLocalDate_Basics.java--         assertEquals(0, test1a.compareTo(test1));
523-- TestLocalDate_Basics.java--         assertEquals(0, test1.compareTo(test1));
523-- TestLocalDate_Basics.java--         assertEquals(0, test1a.compareTo(test1a));
523-- TestLocalDate_Basics.java--         assertEquals(-1, test1.compareTo(test2));
523-- TestLocalDate_Basics.java--         assertEquals(+1, test2.compareTo(test1));
523-- TestLocalDate_Basics.java--         assertEquals(-1, test1.compareTo(test3));
523-- TestLocalDate_Basics.java--         assertEquals(+1, test3.compareTo(test1));
523-- TestLocalDate_Basics.java--         assertEquals(0, test3.compareTo(test2));
523-- TestLocalDate_Basics.java--         assertEquals(0, test1.compareTo(p));
523-- TestLocalDate_Basics.java--         assertEquals(0, test1.compareTo(new YearMonthDay(2005, 6, 2)));
523-- TestLocalDate_Basics.java--             test1.compareTo(null);
523-- TestLocalDate_Basics.java-- //            test1.compareTo(new Date());
523-- TestLocalDate_Basics.java--             test1.compareTo(new TimeOfDay());
523-- TestLocalDate_Basics.java--             new LocalDate(1970, 6, 9).compareTo(partial);
523-- TestPartial_Properties.java--         assertEquals(true, test1.property(DateTimeFieldType.hourOfDay()).compareTo(test2) < 0);
523-- TestPartial_Properties.java--         assertEquals(true, test2.property(DateTimeFieldType.hourOfDay()).compareTo(test1) > 0);
523-- TestPartial_Properties.java--         assertEquals(true, test1.property(DateTimeFieldType.hourOfDay()).compareTo(test1) == 0);
523-- TestPartial_Properties.java--             test1.property(DateTimeFieldType.hourOfDay()).compareTo((ReadablePartial) null);
523-- TestPartial_Properties.java--         assertEquals(true, test1.property(DateTimeFieldType.hourOfDay()).compareTo(dt2) < 0);
523-- TestPartial_Properties.java--         assertEquals(true, test2.property(DateTimeFieldType.hourOfDay()).compareTo(dt1) > 0);
523-- TestPartial_Properties.java--         assertEquals(true, test1.property(DateTimeFieldType.hourOfDay()).compareTo(dt1) == 0);
523-- TestPartial_Properties.java--             test1.property(DateTimeFieldType.hourOfDay()).compareTo((ReadableInstant) null);
523-- TestPartial_Properties.java--         assertEquals(true, test1.property(DateTimeFieldType.minuteOfHour()).compareTo(test2) < 0);
523-- TestPartial_Properties.java--         assertEquals(true, test2.property(DateTimeFieldType.minuteOfHour()).compareTo(test1) > 0);
523-- TestPartial_Properties.java--         assertEquals(true, test1.property(DateTimeFieldType.minuteOfHour()).compareTo(test1) == 0);
523-- TestPartial_Properties.java--             test1.property(DateTimeFieldType.minuteOfHour()).compareTo((ReadablePartial) null);
523-- TestPartial_Properties.java--         assertEquals(true, test1.property(DateTimeFieldType.minuteOfHour()).compareTo(dt2) < 0);
523-- TestPartial_Properties.java--         assertEquals(true, test2.property(DateTimeFieldType.minuteOfHour()).compareTo(dt1) > 0);
523-- TestPartial_Properties.java--         assertEquals(true, test1.property(DateTimeFieldType.minuteOfHour()).compareTo(dt1) == 0);
523-- TestPartial_Properties.java--             test1.property(DateTimeFieldType.minuteOfHour()).compareTo((ReadableInstant) null);
523-- TestLocalTime_Properties.java--         assertEquals(true, test1.hourOfDay().compareTo(test2) < 0);
523-- TestLocalTime_Properties.java--         assertEquals(true, test2.hourOfDay().compareTo(test1) > 0);
523-- TestLocalTime_Properties.java--         assertEquals(true, test1.hourOfDay().compareTo(test1) == 0);
523-- TestLocalTime_Properties.java--             test1.hourOfDay().compareTo((ReadablePartial) null);
523-- TestLocalTime_Properties.java--         assertEquals(true, test1.hourOfDay().compareTo(dt2) < 0);
523-- TestLocalTime_Properties.java--         assertEquals(true, test2.hourOfDay().compareTo(dt1) > 0);
523-- TestLocalTime_Properties.java--         assertEquals(true, test1.hourOfDay().compareTo(dt1) == 0);
523-- TestLocalTime_Properties.java--             test1.hourOfDay().compareTo((ReadableInstant) null);
523-- TestLocalTime_Properties.java--         assertEquals(true, test1.minuteOfHour().compareTo(test2) < 0);
523-- TestLocalTime_Properties.java--         assertEquals(true, test2.minuteOfHour().compareTo(test1) > 0);
523-- TestLocalTime_Properties.java--         assertEquals(true, test1.minuteOfHour().compareTo(test1) == 0);
523-- TestLocalTime_Properties.java--             test1.minuteOfHour().compareTo((ReadablePartial) null);
523-- TestLocalTime_Properties.java--         assertEquals(true, test1.minuteOfHour().compareTo(dt2) < 0);
523-- TestLocalTime_Properties.java--         assertEquals(true, test2.minuteOfHour().compareTo(dt1) > 0);
523-- TestLocalTime_Properties.java--         assertEquals(true, test1.minuteOfHour().compareTo(dt1) == 0);
523-- TestLocalTime_Properties.java--             test1.minuteOfHour().compareTo((ReadableInstant) null);
523-- TestLocalTime_Properties.java--         assertEquals(true, test1.secondOfMinute().compareTo(test2) < 0);
523-- TestLocalTime_Properties.java--         assertEquals(true, test2.secondOfMinute().compareTo(test1) > 0);
523-- TestLocalTime_Properties.java--         assertEquals(true, test1.secondOfMinute().compareTo(test1) == 0);
523-- TestLocalTime_Properties.java--             test1.secondOfMinute().compareTo((ReadablePartial) null);
523-- TestLocalTime_Properties.java--         assertEquals(true, test1.secondOfMinute().compareTo(dt2) < 0);
523-- TestLocalTime_Properties.java--         assertEquals(true, test2.secondOfMinute().compareTo(dt1) > 0);
523-- TestLocalTime_Properties.java--         assertEquals(true, test1.secondOfMinute().compareTo(dt1) == 0);
523-- TestLocalTime_Properties.java--             test1.secondOfMinute().compareTo((ReadableInstant) null);
523-- TestLocalTime_Properties.java--         assertEquals(true, test1.millisOfSecond().compareTo(test2) < 0);
523-- TestLocalTime_Properties.java--         assertEquals(true, test2.millisOfSecond().compareTo(test1) > 0);
523-- TestLocalTime_Properties.java--         assertEquals(true, test1.millisOfSecond().compareTo(test1) == 0);
523-- TestLocalTime_Properties.java--             test1.millisOfSecond().compareTo((ReadablePartial) null);
523-- TestLocalTime_Properties.java--         assertEquals(true, test1.millisOfSecond().compareTo(dt2) < 0);
523-- TestLocalTime_Properties.java--         assertEquals(true, test2.millisOfSecond().compareTo(dt1) > 0);
523-- TestLocalTime_Properties.java--         assertEquals(true, test1.millisOfSecond().compareTo(dt1) == 0);
523-- TestLocalTime_Properties.java--             test1.millisOfSecond().compareTo((ReadableInstant) null);
523-- TestDateTime_Basics.java--         assertEquals(0, test1.compareTo(test1a));
523-- TestDateTime_Basics.java--         assertEquals(0, test1a.compareTo(test1));
523-- TestDateTime_Basics.java--         assertEquals(0, test1.compareTo(test1));
523-- TestDateTime_Basics.java--         assertEquals(0, test1a.compareTo(test1a));
523-- TestDateTime_Basics.java--         assertEquals(-1, test1.compareTo(test2));
523-- TestDateTime_Basics.java--         assertEquals(+1, test2.compareTo(test1));
523-- TestDateTime_Basics.java--         assertEquals(-1, test1.compareTo(test3));
523-- TestDateTime_Basics.java--         assertEquals(+1, test3.compareTo(test1));
523-- TestDateTime_Basics.java--         assertEquals(0, test3.compareTo(test2));
523-- TestDateTime_Basics.java--         assertEquals(+1, test2.compareTo(new MockInstant()));
523-- TestDateTime_Basics.java--         assertEquals(0, test1.compareTo(new MockInstant()));
523-- TestDateTime_Basics.java--             test1.compareTo(null);
523-- TestDateTime_Basics.java-- //            test1.compareTo(new Date());
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test1.year().compareTo(test2) < 0);
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test2.year().compareTo(test1) > 0);
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test1.year().compareTo(test1) == 0);
523-- TestLocalDateTime_Properties.java--             test1.year().compareTo((ReadablePartial) null);
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test1.year().compareTo(dt2) < 0);
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test2.year().compareTo(dt1) > 0);
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test1.year().compareTo(dt1) == 0);
523-- TestLocalDateTime_Properties.java--             test1.year().compareTo((ReadableInstant) null);
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test1.monthOfYear().compareTo(test2) < 0);
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test2.monthOfYear().compareTo(test1) > 0);
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test1.monthOfYear().compareTo(test1) == 0);
523-- TestLocalDateTime_Properties.java--             test1.monthOfYear().compareTo((ReadablePartial) null);
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0);
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0);
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0);
523-- TestLocalDateTime_Properties.java--             test1.monthOfYear().compareTo((ReadableInstant) null);
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test1.dayOfMonth().compareTo(test2) < 0);
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test2.dayOfMonth().compareTo(test1) > 0);
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test1.dayOfMonth().compareTo(test1) == 0);
523-- TestLocalDateTime_Properties.java--             test1.dayOfMonth().compareTo((ReadablePartial) null);
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test1.dayOfMonth().compareTo(dt2) < 0);
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test2.dayOfMonth().compareTo(dt1) > 0);
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test1.dayOfMonth().compareTo(dt1) == 0);
523-- TestLocalDateTime_Properties.java--             test1.dayOfMonth().compareTo((ReadableInstant) null);
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test1.hourOfDay().compareTo(test2) < 0);
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test2.hourOfDay().compareTo(test1) > 0);
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test1.hourOfDay().compareTo(test1) == 0);
523-- TestLocalDateTime_Properties.java--             test1.hourOfDay().compareTo((ReadablePartial) null);
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test1.hourOfDay().compareTo(dt2) < 0);
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test2.hourOfDay().compareTo(dt1) > 0);
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test1.hourOfDay().compareTo(dt1) == 0);
523-- TestLocalDateTime_Properties.java--             test1.hourOfDay().compareTo((ReadableInstant) null);
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test1.minuteOfHour().compareTo(test2) < 0);
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test2.minuteOfHour().compareTo(test1) > 0);
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test1.minuteOfHour().compareTo(test1) == 0);
523-- TestLocalDateTime_Properties.java--             test1.minuteOfHour().compareTo((ReadablePartial) null);
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test1.minuteOfHour().compareTo(dt2) < 0);
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test2.minuteOfHour().compareTo(dt1) > 0);
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test1.minuteOfHour().compareTo(dt1) == 0);
523-- TestLocalDateTime_Properties.java--             test1.minuteOfHour().compareTo((ReadableInstant) null);
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test1.secondOfMinute().compareTo(test2) < 0);
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test2.secondOfMinute().compareTo(test1) > 0);
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test1.secondOfMinute().compareTo(test1) == 0);
523-- TestLocalDateTime_Properties.java--             test1.secondOfMinute().compareTo((ReadablePartial) null);
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test1.secondOfMinute().compareTo(dt2) < 0);
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test2.secondOfMinute().compareTo(dt1) > 0);
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test1.secondOfMinute().compareTo(dt1) == 0);
523-- TestLocalDateTime_Properties.java--             test1.secondOfMinute().compareTo((ReadableInstant) null);
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test1.millisOfSecond().compareTo(test2) < 0);
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test2.millisOfSecond().compareTo(test1) > 0);
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test1.millisOfSecond().compareTo(test1) == 0);
523-- TestLocalDateTime_Properties.java--             test1.millisOfSecond().compareTo((ReadablePartial) null);
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test1.millisOfSecond().compareTo(dt2) < 0);
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test2.millisOfSecond().compareTo(dt1) > 0);
523-- TestLocalDateTime_Properties.java--         assertEquals(true, test1.millisOfSecond().compareTo(dt1) == 0);
523-- TestLocalDateTime_Properties.java--             test1.millisOfSecond().compareTo((ReadableInstant) null);
523-- TestInstant_Basics.java--         assertEquals(0, test1.compareTo(test1a));
523-- TestInstant_Basics.java--         assertEquals(0, test1a.compareTo(test1));
523-- TestInstant_Basics.java--         assertEquals(0, test1.compareTo(test1));
523-- TestInstant_Basics.java--         assertEquals(0, test1a.compareTo(test1a));
523-- TestInstant_Basics.java--         assertEquals(-1, test1.compareTo(test2));
523-- TestInstant_Basics.java--         assertEquals(+1, test2.compareTo(test1));
523-- TestInstant_Basics.java--         assertEquals(-1, test1.compareTo(test3));
523-- TestInstant_Basics.java--         assertEquals(+1, test3.compareTo(test1));
523-- TestInstant_Basics.java--         assertEquals(0, test3.compareTo(test2));
523-- TestInstant_Basics.java--         assertEquals(+1, test2.compareTo(new MockInstant()));
523-- TestInstant_Basics.java--         assertEquals(0, test1.compareTo(new MockInstant()));
523-- TestInstant_Basics.java--             test1.compareTo(null);
523-- TestInstant_Basics.java-- //            test1.compareTo(new Date());
523-- TestDuration_Basics.java--         assertEquals(0, test1.compareTo(test1a));
523-- TestDuration_Basics.java--         assertEquals(0, test1a.compareTo(test1));
523-- TestDuration_Basics.java--         assertEquals(0, test1.compareTo(test1));
523-- TestDuration_Basics.java--         assertEquals(0, test1a.compareTo(test1a));
523-- TestDuration_Basics.java--         assertEquals(-1, test1.compareTo(test2));
523-- TestDuration_Basics.java--         assertEquals(+1, test2.compareTo(test1));
523-- TestDuration_Basics.java--         assertEquals(+1, test2.compareTo(new MockDuration(123L)));
523-- TestDuration_Basics.java--         assertEquals(0, test1.compareTo(new MockDuration(123L)));
523-- TestDuration_Basics.java--             test1.compareTo(null);
523-- TestDuration_Basics.java-- //            test1.compareTo(new Long(123L));
523-- TestBaseSingleFieldPeriod.java--         assertEquals(true, test1.compareTo(test1) == 0);
523-- TestBaseSingleFieldPeriod.java--         assertEquals(true, test1.compareTo(test2) < 0);
523-- TestBaseSingleFieldPeriod.java--         assertEquals(true, test1.compareTo(test3) < 0);
523-- TestBaseSingleFieldPeriod.java--         assertEquals(true, test2.compareTo(test1) > 0);
523-- TestBaseSingleFieldPeriod.java--         assertEquals(true, test2.compareTo(test2) == 0);
523-- TestBaseSingleFieldPeriod.java--         assertEquals(true, test2.compareTo(test3) < 0);
523-- TestBaseSingleFieldPeriod.java--         assertEquals(true, test3.compareTo(test1) > 0);
523-- TestBaseSingleFieldPeriod.java--         assertEquals(true, test3.compareTo(test2) > 0);
523-- TestBaseSingleFieldPeriod.java--         assertEquals(true, test3.compareTo(test3) == 0);
523-- TestBaseSingleFieldPeriod.java-- //            test1.compareTo("Hello");
523-- TestBaseSingleFieldPeriod.java-- //            test1.compareTo(new Period(0, 0, 0, 21, 0, 0, 0, 0, PeriodType.days()));
523-- TestBaseSingleFieldPeriod.java--             test1.compareTo(null);
523-- TestYearMonth_Properties.java--         assertEquals(true, test1.year().compareTo(test2) < 0);
523-- TestYearMonth_Properties.java--         assertEquals(true, test2.year().compareTo(test1) > 0);
523-- TestYearMonth_Properties.java--         assertEquals(true, test1.year().compareTo(test1) == 0);
523-- TestYearMonth_Properties.java--             test1.year().compareTo((ReadablePartial) null);
523-- TestYearMonth_Properties.java--         assertEquals(true, test1.year().compareTo(dt2) < 0);
523-- TestYearMonth_Properties.java--         assertEquals(true, test2.year().compareTo(dt1) > 0);
523-- TestYearMonth_Properties.java--         assertEquals(true, test1.year().compareTo(dt1) == 0);
523-- TestYearMonth_Properties.java--             test1.year().compareTo((ReadableInstant) null);
523-- TestYearMonth_Properties.java--         assertEquals(true, test1.monthOfYear().compareTo(test2) < 0);
523-- TestYearMonth_Properties.java--         assertEquals(true, test2.monthOfYear().compareTo(test1) > 0);
523-- TestYearMonth_Properties.java--         assertEquals(true, test1.monthOfYear().compareTo(test1) == 0);
523-- TestYearMonth_Properties.java--             test1.monthOfYear().compareTo((ReadablePartial) null);
523-- TestYearMonth_Properties.java--         assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0);
523-- TestYearMonth_Properties.java--         assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0);
523-- TestYearMonth_Properties.java--         assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0);
523-- TestYearMonth_Properties.java--             test1.monthOfYear().compareTo((ReadableInstant) null);
523-- TestYearMonthDay_Basics.java--         assertEquals(0, test1.compareTo(test1a));
523-- TestYearMonthDay_Basics.java--         assertEquals(0, test1a.compareTo(test1));
523-- TestYearMonthDay_Basics.java--         assertEquals(0, test1.compareTo(test1));
523-- TestYearMonthDay_Basics.java--         assertEquals(0, test1a.compareTo(test1a));
523-- TestYearMonthDay_Basics.java--         assertEquals(-1, test1.compareTo(test2));
523-- TestYearMonthDay_Basics.java--         assertEquals(+1, test2.compareTo(test1));
523-- TestYearMonthDay_Basics.java--         assertEquals(-1, test1.compareTo(test3));
523-- TestYearMonthDay_Basics.java--         assertEquals(+1, test3.compareTo(test1));
523-- TestYearMonthDay_Basics.java--         assertEquals(0, test3.compareTo(test2));
523-- TestYearMonthDay_Basics.java--         assertEquals(0, test1.compareTo(p));
523-- TestYearMonthDay_Basics.java--             test1.compareTo(null);
523-- TestYearMonthDay_Basics.java-- //            test1.compareTo(new Date());
523-- TestYearMonthDay_Basics.java--             test1.compareTo(new TimeOfDay());
523-- TestYearMonthDay_Basics.java--             new YearMonthDay(1970, 6, 9).compareTo(partial);
523-- TestDateTime_Properties.java--         assertEquals(true, test1.year().compareTo(test2) < 0);
523-- TestDateTime_Properties.java--         assertEquals(true, test2.year().compareTo(test1) > 0);
523-- TestDateTime_Properties.java--         assertEquals(true, test1.year().compareTo(test1) == 0);
523-- TestDateTime_Properties.java--             test1.year().compareTo((ReadableInstant) null);
523-- TestDateTime_Properties.java--         assertEquals(true, test1.year().compareTo(ymd1) > 0);
523-- TestDateTime_Properties.java--         assertEquals(true, test1.year().compareTo(ymd2) == 0);
523-- TestDateTime_Properties.java--         assertEquals(true, test1.year().compareTo(ymd3) < 0);
523-- TestDateTime_Properties.java--             test1.year().compareTo((ReadablePartial) null);
523-- TestDateTime_Properties.java--         assertEquals(true, test1.monthOfYear().compareTo(test2) < 0);
523-- TestDateTime_Properties.java--         assertEquals(true, test2.monthOfYear().compareTo(test1) > 0);
523-- TestDateTime_Properties.java--         assertEquals(true, test1.monthOfYear().compareTo(test1) == 0);
523-- TestDateTime_Properties.java--             test1.monthOfYear().compareTo((ReadableInstant) null);
523-- TestDateTime_Properties.java--         assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0);
523-- TestDateTime_Properties.java--         assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0);
523-- TestDateTime_Properties.java--         assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0);
523-- TestDateTime_Properties.java--             test1.monthOfYear().compareTo((ReadableInstant) null);
523-- TestDateTime_Properties.java--         assertEquals(true, test1.dayOfMonth().compareTo(test2) < 0);
523-- TestDateTime_Properties.java--         assertEquals(true, test2.dayOfMonth().compareTo(test1) > 0);
523-- TestDateTime_Properties.java--         assertEquals(true, test1.dayOfMonth().compareTo(test1) == 0);
523-- TestDateTime_Properties.java--             test1.dayOfMonth().compareTo((ReadableInstant) null);
523-- TestDateTime_Properties.java--         assertEquals(true, test1.dayOfMonth().compareTo(dt2) < 0);
523-- TestDateTime_Properties.java--         assertEquals(true, test2.dayOfMonth().compareTo(dt1) > 0);
523-- TestDateTime_Properties.java--         assertEquals(true, test1.dayOfMonth().compareTo(dt1) == 0);
523-- TestDateTime_Properties.java--             test1.dayOfMonth().compareTo((ReadableInstant) null);
523-- TestDateTime_Properties.java--         assertEquals(true, test1.dayOfYear().compareTo(test2) < 0);
523-- TestDateTime_Properties.java--         assertEquals(true, test2.dayOfYear().compareTo(test1) > 0);
523-- TestDateTime_Properties.java--         assertEquals(true, test1.dayOfYear().compareTo(test1) == 0);
523-- TestDateTime_Properties.java--             test1.dayOfYear().compareTo((ReadableInstant) null);
523-- TestDateTime_Properties.java--         assertEquals(true, test1.dayOfYear().compareTo(dt2) < 0);
523-- TestDateTime_Properties.java--         assertEquals(true, test2.dayOfYear().compareTo(dt1) > 0);
523-- TestDateTime_Properties.java--         assertEquals(true, test1.dayOfYear().compareTo(dt1) == 0);
523-- TestDateTime_Properties.java--             test1.dayOfYear().compareTo((ReadableInstant) null);
523-- TestDateTime_Properties.java--         assertEquals(true, test1.weekOfWeekyear().compareTo(test2) < 0);
523-- TestDateTime_Properties.java--         assertEquals(true, test2.weekOfWeekyear().compareTo(test1) > 0);
523-- TestDateTime_Properties.java--         assertEquals(true, test1.weekOfWeekyear().compareTo(test1) == 0);
523-- TestDateTime_Properties.java--             test1.weekOfWeekyear().compareTo((ReadableInstant) null);
523-- TestDateTime_Properties.java--         assertEquals(true, test1.weekOfWeekyear().compareTo(dt2) < 0);
523-- TestDateTime_Properties.java--         assertEquals(true, test2.weekOfWeekyear().compareTo(dt1) > 0);
523-- TestDateTime_Properties.java--         assertEquals(true, test1.weekOfWeekyear().compareTo(dt1) == 0);
523-- TestDateTime_Properties.java--             test1.weekOfWeekyear().compareTo((ReadableInstant) null);
523-- TestDateTime_Properties.java--         assertEquals(true, test2.dayOfWeek().compareTo(test1) < 0);
523-- TestDateTime_Properties.java--         assertEquals(true, test1.dayOfWeek().compareTo(test2) > 0);
523-- TestDateTime_Properties.java--         assertEquals(true, test1.dayOfWeek().compareTo(test1) == 0);
523-- TestDateTime_Properties.java--             test1.dayOfWeek().compareTo((ReadableInstant) null);
523-- TestDateTime_Properties.java--         assertEquals(true, test2.dayOfWeek().compareTo(dt1) < 0);
523-- TestDateTime_Properties.java--         assertEquals(true, test1.dayOfWeek().compareTo(dt2) > 0);
523-- TestDateTime_Properties.java--         assertEquals(true, test1.dayOfWeek().compareTo(dt1) == 0);
523-- TestDateTime_Properties.java--             test1.dayOfWeek().compareTo((ReadableInstant) null);
523-- TestYearMonth_Basics.java--         assertEquals(0, test1.compareTo(test1a));
523-- TestYearMonth_Basics.java--         assertEquals(0, test1a.compareTo(test1));
523-- TestYearMonth_Basics.java--         assertEquals(0, test1.compareTo(test1));
523-- TestYearMonth_Basics.java--         assertEquals(0, test1a.compareTo(test1a));
523-- TestYearMonth_Basics.java--         assertEquals(-1, test1.compareTo(test2));
523-- TestYearMonth_Basics.java--         assertEquals(+1, test2.compareTo(test1));
523-- TestYearMonth_Basics.java--         assertEquals(-1, test1.compareTo(test3));
523-- TestYearMonth_Basics.java--         assertEquals(+1, test3.compareTo(test1));
523-- TestYearMonth_Basics.java--         assertEquals(0, test3.compareTo(test2));
523-- TestYearMonth_Basics.java--         assertEquals(0, test1.compareTo(p));
523-- TestYearMonth_Basics.java--             test1.compareTo(null);
523-- TestYearMonth_Basics.java--             test1.compareTo(new LocalTime());
523-- TestYearMonth_Basics.java--             new YearMonth(1970, 6).compareTo(partial);
523-- TestMonthDay_Properties.java--         assertEquals(true, test1.monthOfYear().compareTo(test2) < 0);
523-- TestMonthDay_Properties.java--         assertEquals(true, test2.monthOfYear().compareTo(test1) > 0);
523-- TestMonthDay_Properties.java--         assertEquals(true, test1.monthOfYear().compareTo(test1) == 0);
523-- TestMonthDay_Properties.java--             test1.monthOfYear().compareTo((ReadablePartial) null);
523-- TestMonthDay_Properties.java--         assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0);
523-- TestMonthDay_Properties.java--         assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0);
523-- TestMonthDay_Properties.java--         assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0);
523-- TestMonthDay_Properties.java--             test1.monthOfYear().compareTo((ReadableInstant) null);
523-- TestMonthDay_Properties.java--         assertEquals(true, test1.dayOfMonth().compareTo(test2) < 0);
523-- TestMonthDay_Properties.java--         assertEquals(true, test2.dayOfMonth().compareTo(test1) > 0);
523-- TestMonthDay_Properties.java--         assertEquals(true, test1.dayOfMonth().compareTo(test1) == 0);
523-- TestMonthDay_Properties.java--             test1.dayOfMonth().compareTo((ReadablePartial) null);
523-- TestMonthDay_Properties.java--         assertEquals(true, test1.dayOfMonth().compareTo(dt2) < 0);
523-- TestMonthDay_Properties.java--         assertEquals(true, test2.dayOfMonth().compareTo(dt1) > 0);
523-- TestMonthDay_Properties.java--         assertEquals(true, test1.dayOfMonth().compareTo(dt1) == 0);
523-- TestMonthDay_Properties.java--             test1.dayOfMonth().compareTo((ReadableInstant) null);
523-- TestMutableDateTime_Basics.java--         assertEquals(0, test1.compareTo(test1a));
523-- TestMutableDateTime_Basics.java--         assertEquals(0, test1a.compareTo(test1));
523-- TestMutableDateTime_Basics.java--         assertEquals(0, test1.compareTo(test1));
523-- TestMutableDateTime_Basics.java--         assertEquals(0, test1a.compareTo(test1a));
523-- TestMutableDateTime_Basics.java--         assertEquals(-1, test1.compareTo(test2));
523-- TestMutableDateTime_Basics.java--         assertEquals(+1, test2.compareTo(test1));
523-- TestMutableDateTime_Basics.java--         assertEquals(-1, test1.compareTo(test3));
523-- TestMutableDateTime_Basics.java--         assertEquals(+1, test3.compareTo(test1));
523-- TestMutableDateTime_Basics.java--         assertEquals(0, test3.compareTo(test2));
523-- TestMutableDateTime_Basics.java--         assertEquals(+1, test2.compareTo(new MockInstant()));
523-- TestMutableDateTime_Basics.java--         assertEquals(0, test1.compareTo(new MockInstant()));
523-- TestMutableDateTime_Basics.java--             test1.compareTo(null);
523-- TestMutableDateTime_Basics.java-- //            test1.compareTo(new Date());
523-- TestLocalTime_Basics.java--         assertEquals(0, test1.compareTo(test1a));
523-- TestLocalTime_Basics.java--         assertEquals(0, test1a.compareTo(test1));
523-- TestLocalTime_Basics.java--         assertEquals(0, test1.compareTo(test1));
523-- TestLocalTime_Basics.java--         assertEquals(0, test1a.compareTo(test1a));
523-- TestLocalTime_Basics.java--         assertEquals(-1, test1.compareTo(test2));
523-- TestLocalTime_Basics.java--         assertEquals(+1, test2.compareTo(test1));
523-- TestLocalTime_Basics.java--         assertEquals(-1, test1.compareTo(test3));
523-- TestLocalTime_Basics.java--         assertEquals(+1, test3.compareTo(test1));
523-- TestLocalTime_Basics.java--         assertEquals(0, test3.compareTo(test2));
523-- TestLocalTime_Basics.java--         assertEquals(0, test1.compareTo(p));
523-- TestLocalTime_Basics.java--         assertEquals(0, test1.compareTo(new TimeOfDay(10, 20, 30, 40)));
523-- TestLocalTime_Basics.java--             test1.compareTo(null);
523-- TestLocalTime_Basics.java-- //            test1.compareTo(new Date());
523-- TempTest.java-- //        System.out.println(date1.compareTo(date2));
523-- TempTest.java-- //        System.out.println(date1.toLocalDate().compareTo(date2.toLocalDate()));
523-- TestMonthDay_Basics.java--         assertEquals(0, test1.compareTo(test1a));
523-- TestMonthDay_Basics.java--         assertEquals(0, test1a.compareTo(test1));
523-- TestMonthDay_Basics.java--         assertEquals(0, test1.compareTo(test1));
523-- TestMonthDay_Basics.java--         assertEquals(0, test1a.compareTo(test1a));
523-- TestMonthDay_Basics.java--         assertEquals(-1, test1.compareTo(test2));
523-- TestMonthDay_Basics.java--         assertEquals(+1, test2.compareTo(test1));
523-- TestMonthDay_Basics.java--         assertEquals(-1, test1.compareTo(test3));
523-- TestMonthDay_Basics.java--         assertEquals(+1, test3.compareTo(test1));
523-- TestMonthDay_Basics.java--         assertEquals(0, test3.compareTo(test2));
523-- TestMonthDay_Basics.java--         assertEquals(0, test1.compareTo(p));
523-- TestMonthDay_Basics.java--             test1.compareTo(null);
523-- TestMonthDay_Basics.java--             test1.compareTo(new LocalTime());
523-- TestMonthDay_Basics.java--             new MonthDay(10, 6).compareTo(partial);
523-- TestDateMidnight_Basics.java--         assertEquals(0, test1.compareTo(test1a));
523-- TestDateMidnight_Basics.java--         assertEquals(0, test1a.compareTo(test1));
523-- TestDateMidnight_Basics.java--         assertEquals(0, test1.compareTo(test1));
523-- TestDateMidnight_Basics.java--         assertEquals(0, test1a.compareTo(test1a));
523-- TestDateMidnight_Basics.java--         assertEquals(-1, test1.compareTo(test2));
523-- TestDateMidnight_Basics.java--         assertEquals(+1, test2.compareTo(test1));
523-- TestDateMidnight_Basics.java--         assertEquals(-1, test1.compareTo(test3));
523-- TestDateMidnight_Basics.java--         assertEquals(+1, test3.compareTo(test1));
523-- TestDateMidnight_Basics.java--         assertEquals(-1, test3.compareTo(test2));  // midnight paris before london
523-- TestDateMidnight_Basics.java--         assertEquals(+1, test2.compareTo(new MockInstant()));
523-- TestDateMidnight_Basics.java--         assertEquals(0, test1.compareTo(new MockInstant()));
523-- TestDateMidnight_Basics.java--             test1.compareTo(null);
523-- TestDateMidnight_Basics.java-- //            test1.compareTo(new Date());
523-- TestPreciseDurationField.java--         assertEquals(0, iField.compareTo(iField));
523-- TestPreciseDurationField.java--         assertEquals(-1, iField.compareTo(ISOChronology.getInstance().minutes()));
523-- TestPreciseDurationField.java--         assertEquals(1, iField.compareTo(dummy));
523-- TestPreciseDurationField.java-- //            iField.compareTo("");
523-- TestPreciseDurationField.java--             iField.compareTo(null);
523-- TestScaledDurationField.java--         assertEquals(0, iField.compareTo(iField));
523-- TestScaledDurationField.java--         assertEquals(-1, iField.compareTo(ISOChronology.getInstance().minutes()));
523-- TestScaledDurationField.java--         assertEquals(1, iField.compareTo(dummy));
523-- TestScaledDurationField.java-- //            iField.compareTo("");
523-- TestScaledDurationField.java--             iField.compareTo(null);
523-- TestMillisDurationField.java--         assertEquals(0, MillisDurationField.INSTANCE.compareTo(MillisDurationField.INSTANCE));
523-- TestMillisDurationField.java--         assertEquals(-1, MillisDurationField.INSTANCE.compareTo(ISOChronology.getInstance().seconds()));
523-- TestMillisDurationField.java--         assertEquals(1, MillisDurationField.INSTANCE.compareTo(dummy));
523-- TestMillisDurationField.java-- //            MillisDurationField.INSTANCE.compareTo("");
523-- TestMillisDurationField.java--             MillisDurationField.INSTANCE.compareTo(null);
187-- ExtratoDAO.java-- 		String sql = "Select * from \"Extrato\" where \"idConta\" = ? order by \"idExtrato\" desc";
187-- ItemDeExtratoDAO.java-- 		String sql = "Select * from \"ItemDeExtrato\" where \"idExtrato\" = ? order by dia";
616-- Vertice.java--         java.util.Collections.sort(arrayDeVerices);
616-- Vertice.java--         java.util.Collections.sort(arrayDeVerices);
616-- mxGraphAnalysis.java-- 		Collections.sort(result, new Comparator<mxCellState>()
616-- mxGraphAnalysis.java-- 			public int compare(mxCellState o1, mxCellState o2)
616-- mxGraphAnalysis.java-- 				return d1.compareTo(d2);
616-- mxCoordinateAssignment.java-- 		Arrays.sort(weightedValues);
616-- mxCoordinateAssignment.java-- 		Arrays.sort(medianValues);
616-- mxCoordinateAssignment.java-- 							Arrays.sort(sortedCells);
616-- mxCoordinateAssignment.java-- 	 * sum of their connected edges. Does not violate (x.compareTo(y)==0) ==
616-- mxCoordinateAssignment.java-- 		public int compareTo(Object arg0)
616-- mxMedianHybridCrossingReduction.java-- 		Arrays.sort(medianValues);
616-- mxMedianHybridCrossingReduction.java-- 		Arrays.sort(medianValues);
616-- mxMedianHybridCrossingReduction.java-- 	 * values. Does not violate (x.compareTo(y)==0) == (x.equals(y))
616-- mxMedianHybridCrossingReduction.java-- 		public int compareTo(Object arg0)
616-- mxCompactTreeLayout.java-- 		Arrays.sort(sortedCellsArray);
616-- mxCompactTreeLayout.java-- 	 * sum of their connected edges. Does not violate (x.compareTo(y)==0) ==
616-- mxCompactTreeLayout.java-- 		public int compareTo(Object arg0)
616-- mxParallelEdgeLayout.java-- 			return (srcId.compareTo(trgId) > 0) ? trgId + "-" + srcId : srcId
616-- mxCellPath.java-- 					comp = t1.compareTo(t2);
616-- mxCellPath.java-- 					comp = Integer.valueOf(t1).compareTo(Integer.valueOf(t2));
616-- mxUtils.java-- 			public int compare(Object o1, Object o2)
583-- SwipeableRecyclerViewTouchListener.java--                     Collections.sort(mPendingDismisses);
583-- SwipeableRecyclerViewTouchListener.java--         public int compareTo(@NonNull PendingDismissData other) {
583-- WeekReportActivity.java--                         Collections.sort(entries1, new Comparator<PieEntry>() {
583-- WeekReportActivity.java--                             public int compare(PieEntry pieEntry, PieEntry t1) {
583-- WeekReportActivity.java--                         Collections.sort(activities, new Comparator<RankingItem>() {
583-- WeekReportActivity.java--                             public int compare(RankingItem rankingItem, RankingItem t1) {
583-- ITListFragment.java--                 Collections.sort(investedTimes, new Comparator<InvestedTime>() {
583-- ITListFragment.java--                     public int compare(InvestedTime it, InvestedTime it1) {
99-- EchoServer.java--                 	if(str.compareTo("Hello")==0) {
99-- EchoServer.java--                         if(mac[1].compareTo(MacESPDavide)!=0)
99-- EchoServer.java--                 		if(inputLine.compareTo("STOP")!=0) {
99-- Receiver.java--                     if (str.compareTo("Hello") == 0) {
99-- Receiver.java--                         if (mac[1].compareTo(MacESPDavide) != 0)
99-- Receiver.java--                             if (inputLine.compareTo("STOP") != 0) {
591-- FileLruCache.java--         public int compareTo(ModifiedFile another) {
591-- FileLruCache.java--                 return getFile().compareTo(another.getFile());
591-- GraphObjectAdapter.java--                 Collections.sort(section, new Comparator<GraphObject>() {
591-- GraphObjectAdapter.java--                     public int compare(GraphObject a, GraphObject b) {
591-- GraphObjectAdapter.java--         Collections.sort(sectionKeys, Collator.getInstance());
591-- DataDoEncontro.java-- 	public int compareTo(DataDoEncontro outra) {
591-- Encontro.java-- 	public int compareTo(Date data) {
656-- CadastrarProdutoActivity.java--             if ((precoProduto.compareTo(new BigDecimal(50000))) == 1){
656-- VisualizarProdutoActivity.java--         if ((bigDecimal.compareTo(bigDecimal1)) == 1){
499-- Inbox.java-- 		public int compareTo(InboxMessage o) {
499-- Inbox.java-- 			return messageType.compareTo(o.getMessageType());
499-- Inbox.java-- 		Collections.sort(list);
532-- Convivio.java--        if(dep.compareTo("DEI")!= 0){
532-- Convivio.java--         Collections.sort(locaisCadastrados, (Object o1, Object o2) -> {
532-- GestorDeConvivios.java--         if (temp[0].compareTo("jar") == 0) {
532-- GestorDeConvivios.java--         } else if (temp[0].compareTo("desp") == 0) {
532-- GestorDeConvivios.java--         } else if (temp[0].compareTo("exp") == 0) {
532-- GestorDeConvivios.java--         else if (temp[0].compareTo("bar") == 0) {
532-- GestorDeConvivios.java--         Collections.sort(locaisCoimbra, new Comparator<Local>() {
532-- GestorDeConvivios.java--             public int compare(Local o1, Local o2) {
218-- ConsultaInventario.java-- 							.compareTo(dataBanco.format(txfDataFinal.getDate()));
75-- CnpjUtils.java-- 		return unformat(cnpjSource).compareTo(unformat(cnpjTarget)) == 0;
410-- VerificarDAO.java--             stnt = con.prepareStatement("select idC, cidade from campus order by idC");
410-- VerificarDAO.java--             stnt = con.prepareStatement("select id, nome from profissao order by id");
410-- VerificarDAO.java--             stnt = con.prepareStatement("select id, nome from curso order by nome");
410-- VerificarDAO.java--             stnt = con.prepareStatement("select id, nome from disciplinas order by nome");
568-- Whitelist.java--                 if (origin.compareTo("*") == 0) {
568-- Whitelist.java--                 if (origin.compareTo("*") == 0) {
636-- CalculoDatas.java-- 		int resultado = hoje.compareTo(data);
83-- JAbstractReadOnlyControllerImpl.java--         if (page.getPageOrderBy() != null) {
83-- JAbstractReadOnlyControllerImpl.java--                 sort = new Sort(new Sort.Order(Direction.DESC, page.getPageOrderBy()));
83-- JAbstractReadOnlyControllerImpl.java--                 sort = new Sort(new Sort.Order(Direction.ASC, page.getPageOrderBy()));
83-- JPageDTO.java--     private String pageOrderBy;
83-- JPageDTO.java--     public JPageDTO(Integer pageSize, Integer pageNumber, String pageOrderBy, ETipoOrdenacao pageDirection) {
83-- JPageDTO.java--         this.pageOrderBy = pageOrderBy;
83-- JPageDTO.java--         this.pageOrderBy = null;
83-- JPageDTO.java--     public String getPageOrderBy() {
83-- JPageDTO.java--         return pageOrderBy;
83-- JPageDTO.java--     public void setPageOrderBy(String pageOrderBy) {
83-- JPageDTO.java--         this.pageOrderBy = pageOrderBy;
265-- TableRequest.java--                     hql += " order by " + column + " " + (getDirection() > 0 ? "ASC" : "DESC");
265-- FeriasService.java--         String hql = "from Ferias f where f.funcionarioCargo.id = :id order by f.dataGozoFim desc";//consulta todas para testar// and ( :dataInicio between f.dataGozoInicio and f.dataGozoFim or :dataFim between f.dataGozoInicio and f.dataGozoFim or (f.dataGozoInicio > :dataInicio  and f.dataGozoFim < :dataFim))";
265-- FeriasService.java--         //        if (f.getDataGozoInicio().compareTo(dIni) > 0) {
265-- FeriasService.java--         //        if (f.getDataGozoFim().compareTo(dFim) < 0) {
265-- FeriasService.java--         List<Ferias> ferias =  entityManager.createQuery("from Ferias f where f.funcionarioCargo.id = :id order by f.dataAquisitivoFim desc")
265-- FuncionarioCargoService.java--                 if (d.compareTo(fim) < 0) {
265-- FolhaCalculadaService.java--                 + " order by sum(e.valor) desc")
265-- FolhaCalculadaService.java--                 + " order by sum(e.valor) desc")
265-- FolhaCalculadaService.java--         hql += !hql.contains("order") ? " order by t.ano desc, t.mes desc,tipo " : ",t.ano desc, t.mes desc,tipo ";
265-- FolhaCalculadaService.java--         fr.getEventos().sort(new Comparator<EventoFolha>() {
265-- FolhaCalculadaService.java--             public int compare(EventoFolha f1, EventoFolha f2) {
265-- FaixaSalarialService.java--                 + " where t.funcionarioCargo.id = :idCargo and t.dataInicio <= :data order by t.dataInicio desc";
265-- FaixaSalarialService.java--                 + " where id.dataInicio <= :data and faixaSalarial.id = :id order by id.dataInicio desc";
265-- TabelaService.java--         return entityManager.createQuery("from Tabela t left outer join fetch t.tabelaValoreses tv where t.id = :id order by tv.valorInicial", Tabela.class)
265-- TabelaService.java--                 + " order by t.dataInicio desc";
265-- Consulta.java--         if (dataComercial.compareTo(dataComercialFim) > 0) {
265-- Consulta.java--         while (dataComercial.compareTo(dataComercialFim) <= 0) {
265-- EventoCollection.java--         eventos.sort(new Comparator<IEvento>() {
265-- EventoCollection.java--             public int compare(IEvento f1, IEvento f2) {
265-- Utilitarios.java--         if (d1.compareTo(d2) > 0) {
265-- Utilitarios.java--         if (d1.compareTo(d2) < 0) {
265-- DataComercial.java--     public int compareTo(DataComercial data) {
493-- Ordena.java-- 		Collections.sort(pessoa);
493-- Pessoa.java-- 	public int compareTo(Pessoa outrapessoa) {
304-- CentroCustoGateway.java--     return repository.findByUsuarioEmailOrderByNome(email, pageRequest);
304-- CentroCustoGateway.java--     return repository.findByUsuarioEmailOrderByNome(email).stream()
304-- CentroCustoGateway.java--       return repository.findByUsuarioEmailOrderByNome(email).stream()
304-- CentroCustoGateway.java--       return repository.findByUsuarioEmailOrderByNome(email).stream()
304-- CentroCustoGateway.java--     return repository.findByUsuarioEmailOrderByNome(email).stream()
304-- CentroCustoGateway.java--       return repository.findByUsuarioEmailOrderByNome(email).stream()
304-- CentroCustoGateway.java--       return repository.findByUsuarioEmailOrderByNome(email).stream()
304-- LancamentoGateway.java--     PageRequest pageRequest = PageRequest.of(page, linesPerPage, Sort.by(orders));
304-- LancamentoGateway.java--         repository.findByStatusAndUsuarioEmailAndUuidAndParcelaGreaterThanOrderByParcela(
304-- LancamentoGateway.java--       repository.findByTipoAndUsuarioEmailAndDataExclusaoIsNullOrderByNomeNome(Tipo.DESPESA, email)
304-- LancamentoGateway.java--       repository.findByTipoAndUsuarioEmailAndDataExclusaoIsNullOrderByNomeNome(Tipo.RECEITA, email)
304-- LancamentoGateway.java--         .sorted(Comparator.comparing(LancamentoFiltro::getNome))
304-- LancamentoGateway.java--     repository.findByUsuarioEmailAndDataExclusaoIsNullOrderByNomeNome(email).stream()
304-- LancamentoGateway.java--         .sorted(Comparator.comparing(LancamentoFiltro::getNome))
304-- LancamentoGateway.java--     return repository.findByStatusAndVencimentoBeforeOrderByUsuarioNome(status, date);
304-- CentroCustoRepository.java--   List<CentroCusto> findByUsuarioEmailOrderByNome(final String email);
304-- CentroCustoRepository.java--   Page<CentroCusto> findByUsuarioEmailOrderByNome(final String email, final Pageable pageable);
304-- LancamentoRepository.java--   Collection<Lancamento> findByStatusAndVencimentoBeforeOrderByUsuarioNome(
304-- LancamentoRepository.java--   Page<Lancamento> findByStatusAndUsuarioEmailAndUuidAndParcelaGreaterThanOrderByParcela(
304-- LancamentoRepository.java--   List<Lancamento> findByTipoAndUsuarioEmailAndDataExclusaoIsNullOrderByNomeNome(
304-- LancamentoRepository.java--   List<Lancamento> findByUsuarioEmailAndDataExclusaoIsNullOrderByNomeNome(final String email);
102-- Agenda.java--     public int compareTo(Object another) {
102-- Agenda.java--             if (this.getDia().compareTo(anotherAgenda.getDia()) == 0) {
102-- Agenda.java--                 return this.getHoraInicial().compareTo(anotherAgenda.getHoraInicial());
102-- Agenda.java--                 return this.getDia().compareTo(anotherAgenda.getDia());
102-- MainActivity.java--             Collections.sort(datas);
102-- MainActivity.java--         Collections.sort(salas, new Comparator<String>() {
102-- MainActivity.java--             public int compare(String str1, String str2) {
102-- MainActivity.java--                     res = str1.compareTo(str2);
102-- MainActivity.java--             Collections.sort(datasFormatadas);
102-- MainActivity.java--             Collections.sort(listaAgendaTemp);
102-- TextoAgendaActivity.java--         if( testeCalendario.compareTo(Calendar.getInstance()) > 0 ) {
102-- TextoAgendaActivity.java--             if( testeCalendario.compareTo(Calendar.getInstance()) > 0 ) {
102-- TextoAgendaActivity.java--             if( testeCalendario.compareTo(Calendar.getInstance()) > 0 ) {
