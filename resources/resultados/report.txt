Arquivo: source_projects/projet_510/Enter-and-Out-Program/Controle de Entrada & Saida (Janela)/src/Janela.java Ordenação: .compareTo(Linha: 			if(tNome.getText()==null || tNome.getText().compareTo("")==0 || tRg.getText()==null || tRg.getText().compareTo("")==0 ||

Arquivo: source_projects/projet_301/...PessoasContato.java Ordenação: public int compareLinha:     public int compareTo(PessoasContato o) {
Arquivo: source_projects/projet_301/...PessoasContato.java Ordenação: .compareTo(Linha:         return this.nome.compareTo(o.getNome());
Arquivo: source_projects/projet_301/...Metodos.java Ordenação: .sort(Linha:         Collections.sort(lista1); //Ordena os objetos por nome// 

Arquivo: source_projects/projet_304/...CentroCustoRepository.java Ordenação: OrderByLinha:   List<CentroCusto> findByUsuarioEmailOrderByNome(final String email);
Arquivo: source_projects/projet_304/...CentroCustoRepository.java Ordenação: OrderByLinha:   Page<CentroCusto> findByUsuarioEmailOrderByNome(final String email, final Pageable pageable);
Arquivo: source_projects/projet_304/...LancamentoRepository.java Ordenação: OrderByLinha:   Collection<Lancamento> findByStatusAndVencimentoBeforeOrderByUsuarioNome(
Arquivo: source_projects/projet_304/...LancamentoRepository.java Ordenação: OrderByLinha:   List<Lancamento> findByTipoAndUsuarioEmailAndDataExclusaoIsNullOrderByNomeNome(
Arquivo: source_projects/projet_304/...LancamentoRepository.java Ordenação: OrderByLinha:   List<Lancamento> findByUsuarioEmailAndDataExclusaoIsNullOrderByNomeNome(final String email);
Arquivo: source_projects/projet_304/...LancamentoGateway.java Ordenação: OrderByLinha:       repository.findByTipoAndUsuarioEmailAndDataExclusaoIsNullOrderByNomeNome(Tipo.DESPESA, email)
Arquivo: source_projects/projet_304/...LancamentoGateway.java Ordenação: OrderByLinha:       repository.findByTipoAndUsuarioEmailAndDataExclusaoIsNullOrderByNomeNome(Tipo.RECEITA, email)
Arquivo: source_projects/projet_304/...LancamentoGateway.java Ordenação: .sortedLinha:         .sorted(Comparator.comparing(LancamentoFiltro::getNome))
Arquivo: source_projects/projet_304/...LancamentoGateway.java Ordenação: OrderByLinha:     repository.findByUsuarioEmailAndDataExclusaoIsNullOrderByNomeNome(email).stream()
Arquivo: source_projects/projet_304/...LancamentoGateway.java Ordenação: .sortedLinha:         .sorted(Comparator.comparing(LancamentoFiltro::getNome))
Arquivo: source_projects/projet_304/...LancamentoGateway.java Ordenação: OrderByLinha:     return repository.findByStatusAndVencimentoBeforeOrderByUsuarioNome(status, date);
Arquivo: source_projects/projet_304/...CentroCustoGateway.java Ordenação: OrderByLinha:     return repository.findByUsuarioEmailOrderByNome(email, pageRequest);
Arquivo: source_projects/projet_304/...CentroCustoGateway.java Ordenação: OrderByLinha:     return repository.findByUsuarioEmailOrderByNome(email).stream()
Arquivo: source_projects/projet_304/...CentroCustoGateway.java Ordenação: OrderByLinha:       return repository.findByUsuarioEmailOrderByNome(email).stream()
Arquivo: source_projects/projet_304/...CentroCustoGateway.java Ordenação: OrderByLinha:       return repository.findByUsuarioEmailOrderByNome(email).stream()
Arquivo: source_projects/projet_304/...CentroCustoGateway.java Ordenação: OrderByLinha:     return repository.findByUsuarioEmailOrderByNome(email).stream()
Arquivo: source_projects/projet_304/...CentroCustoGateway.java Ordenação: OrderByLinha:       return repository.findByUsuarioEmailOrderByNome(email).stream()
Arquivo: source_projects/projet_304/...CentroCustoGateway.java Ordenação: OrderByLinha:       return repository.findByUsuarioEmailOrderByNome(email).stream()

Arquivo: source_projects/projet_311/...PessoasContato.java Ordenação: public int compareLinha:     public int compareTo(PessoasContato o) {
Arquivo: source_projects/projet_311/...PessoasContato.java Ordenação: .compareTo(Linha:         return this.nome.compareTo(o.getNome());
Arquivo: source_projects/projet_311/...Metodos.java Ordenação: .sort(Linha:         Collections.sort(lista1); //Ordena os objetos por nome// 

Arquivo: source_projects/projet_440/...DependenteDAO.java Ordenação: order byLinha:         this.selectTodos = con.getConnection().prepareStatement("select * from dependente order by nome;");
Arquivo: source_projects/projet_440/...PessoaDAO.java Ordenação: order byLinha:         this.selectTodos = con.getConnection().prepareStatement("select * from pessoa order by nome;");

Arquivo: source_projects/projet_493/...Ordena.java Ordenação: .sort(Linha: 		Collections.sort(pessoa);
Arquivo: source_projects/projet_493/...Pessoa.java Ordenação: public int compareLinha: 	public int compareTo(Pessoa outrapessoa) {

Arquivo: source_projects/projet_252/...MainFrame.java Ordenação: OrderByLinha: 			getBtgOrderBy().add(rbtNomeOrder);

Arquivo: source_projects/projet_350/...PessoaDAO.java Ordenação: order byLinha:         return em.createQuery("from Pessoa order by id").getResultList();

Arquivo: source_projects/projet_295/...ListaPessoasPresenter.java Ordenação: .sort(Linha:             Collections.sort(lista, new ComparadorDeTelefonePessoa());
Arquivo: source_projects/projet_295/...ComparadorDeTelefonePessoa.java Ordenação: public int compareLinha:    public int compare(Pessoa aPerson, Pessoa anotherPerson) {
Arquivo: source_projects/projet_295/...Usuario.java Ordenação: .compareTo(Linha:         return nome.compareTo(other.getNome());
Arquivo: source_projects/projet_295/...Pessoa.java Ordenação: public int compareLinha:     public int compareTo(Pessoa pessoa) {
Arquivo: source_projects/projet_295/...Pessoa.java Ordenação: .compareTo(Linha:         return nome.compareTo(pessoa.nome);

Arquivo: source_projects/projet_88/...PessoaRepository.java Ordenação: OrderByLinha: 	List<Pessoa> findAllByOrderByNomeDesc();
Arquivo: source_projects/projet_88/...PessoaServiceImpl.java Ordenação: OrderByLinha:         return pessoaRepository.findAllByOrderByNomeDesc();
Arquivo: source_projects/projet_88/...PessoaRepositoryTest.java Ordenação: OrderByLinha:         List<Pessoa> pessoas = pessoaRepository.findAllByOrderByNomeDesc();

Arquivo: source_projects/projet_460/...PessoaDAO.java Ordenação: order byLinha: 				"from Pessoa order by nome");
Arquivo: source_projects/projet_460/...TipoRelacionamentoDAO.java Ordenação: order byLinha: 				"from TipoRelacionamento order by nome");
Arquivo: source_projects/projet_460/...RelacionamentoPessoaDAO.java Ordenação: order byLinha: 				"from RelacionamentoPessoa order by nome");

Arquivo: source_projects/projet_609/...TestDumpCommands.java Ordenação: .compareTo(Linha:             l = s1.getHostname().compareTo(s2.getHostname());
Arquivo: source_projects/projet_609/...TestDumpCommands.java Ordenação: .sort(Linha:         Collections.sort(servers, serverHostnamePortSorter);
Arquivo: source_projects/projet_609/...TestHABasics.java Ordenação: order byLinha:         ResultSet rs = s.executeQuery("select name from fruits order by 1");
Arquivo: source_projects/projet_609/...DatabaseMetaData.java Ordenação: .compareTo(Linha:             if ((compareResult = this.columnIndexName.compareTo(indexInfoKey.columnIndexName)) != 0) {
Arquivo: source_projects/projet_609/...DatabaseMetaData.java Ordenação: .compareTo(Linha:             return this.tableName.compareTo(tablesKey.tableName);
Arquivo: source_projects/projet_609/...DatabaseMetaData.java Ordenação: order byLinha:                 // Required to be sorted in name-order by JDBC spec, in 'normal' case getProcedures takes care of this for us, but if system tables are

Arquivo: source_projects/projet_550/...Pessoa.java Ordenação: public int compareLinha:     public int compareTo(Pessoa o) {

Arquivo: source_projects/projet_280/...FormLancamentoFinanceiro.java Ordenação: order byLinha:             ResultSet rsConFin = cc.stm.executeQuery("select * from lancamento_financeiro "+where+" order by nome limit 25");

Arquivo: source_projects/projet_410/...VerificarDAO.java Ordenação: order byLinha:             stnt = con.prepareStatement("select id, nome from profissao order by id");
Arquivo: source_projects/projet_410/...VerificarDAO.java Ordenação: order byLinha:             stnt = con.prepareStatement("select id, nome from curso order by nome");
Arquivo: source_projects/projet_410/...VerificarDAO.java Ordenação: order byLinha:             stnt = con.prepareStatement("select id, nome from disciplinas order by nome");

Arquivo: source_projects/projet_379/...LancamentoRepository.java Ordenação: OrderByLinha:   Collection<Lancamento> findByStatusAndVencimentoBeforeAndDataExclusaoIsNullOrderByUsuarioNome(
Arquivo: source_projects/projet_379/...LancamentoGateway.java Ordenação: OrderByLinha:     return repository.findByStatusAndVencimentoBeforeAndDataExclusaoIsNullOrderByUsuarioNome(status, date);

Arquivo: source_projects/projet_101/...Fpessoa.java Ordenação: order byLinha:                 + "values ((select id from pessoa order by id desc limit 1),?)";

Arquivo: source_projects/projet_275/...AgendaTelefonica.java Ordenação: order byLinha: //        preenchertabela("select * from login order by nome");
Arquivo: source_projects/projet_275/...CadastroLogin.java Ordenação: order byLinha:         preenchertabela("select * from login where permissao in ('Gestor', 'Recebedor', 'recepção') order by nome"); 
Arquivo: source_projects/projet_275/...CadastroLogin.java Ordenação: order byLinha:             preenchertabela("select * from login order by nome");
Arquivo: source_projects/projet_275/...CadastroLogin.java Ordenação: order byLinha:         preenchertabela("select * from login order by nome");
Arquivo: source_projects/projet_275/...CadastroLogin.java Ordenação: order byLinha:         preenchertabela("select * from login order by nome");

Arquivo: source_projects/projet_312/CadastroPessoaSattra/mysql-connector-java-5.1.18/src/com/mysql/jdbc/DatabaseMetaData.java Ordenação: order byLinha: 				// Required to be sorted in name-order by JDBC spec,
